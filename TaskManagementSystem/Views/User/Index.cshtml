@model TaskManagementSystem.Models.ViewModels.UserManagementViewModel

<style>
    body {
        background-color: #1a1d23;
        color: #e9ecef;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', sans-serif;
        margin: 0;
        padding: 0;
        height: 100vh;
        overflow: hidden;
    }

    .navbar {
        background-color: #1a1d23;
        padding: 8px 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .navbar-left {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .project-name {
        color: #ffffff;
        font-size: 18px;
        font-weight: 700;
        margin: 0;
    }

    .table-view-container {
        background-color: #1a1d23;
        border-radius: 8px;
        padding: 16px;
        margin: 16px;
        height: calc(100vh - 120px);
        display: flex;
        flex-direction: column;
    }

    .table-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        gap: 12px;
    }

    .left-controls {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .btn-add-user {
        background-color: #0079bf;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
        gap: 6px;
    }

        .btn-add-user:hover {
            background-color: #026aa7;
        }

    .search-box {
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 12px;
        color: #e9ecef;
        min-width: 200px;
        font-size: 14px;
        height: 40px;
    }

        .search-box:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

    .tasks-table-container {
        flex: 1;
        overflow: auto;
        background-color: #101204;
        border-radius: 8px;
        position: relative;
    }

    .tasks-table {
        width: 100%;
        border-collapse: collapse;
    }

        .tasks-table th {
            background-color: #1a1d23;
            padding: 12px 16px;
            text-align: left;
            font-weight: 600;
            color: #9fadbc;
            border-bottom: 1px solid #444;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .tasks-table td {
            padding: 12px 16px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

        .tasks-table tbody tr:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

    .role-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
        text-align: center;
        display: inline-block;
    }

    .role-admin {
        background-color: #e6f4ff;
        color: #0079bf;
    }

    .role-user {
        background-color: #f4f5f7;
        color: #5e6c84;
    }

    .action-btn {
        background: none;
        border: none;
        color: #9fadbc;
        cursor: pointer;
        padding: 6px 8px;
        border-radius: 4px;
        transition: all 0.2s;
        margin-right: 4px;
    }

        .action-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

        .action-btn.edit {
            color: #0079bf;
        }

        .action-btn.delete {
            color: #dc3545;
        }

            .action-btn.delete:hover {
                background-color: rgba(220, 53, 69, 0.1);
            }

    .no-users {
        text-align: center;
        color: #9fadbc;
        padding: 40px;
        font-style: italic;
    }

    /* Modal Styles */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 1000;
        align-items: center;
        justify-content: center;
    }

        .modal-overlay.active {
            display: flex;
        }

    .user-modal {
        background-color: #2b2f36;
        border-radius: 8px;
        width: 500px;
        max-width: 90vw;
        margin: 0 auto;
        position: relative;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
        z-index: 1001;
    }

    .modal-header {
        padding: 16px 20px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-title {
        font-size: 18px;
        font-weight: 600;
        color: #e9ecef;
        margin: 0;
    }

    .modal-close-btn {
        background: transparent;
        border: none;
        color: #9fadbc;
        font-size: 20px;
        cursor: pointer;
        padding: 4px;
        border-radius: 3px;
        transition: background-color 0.2s;
    }

        .modal-close-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

    .modal-body {
        padding: 20px;
    }

    .form-group {
        margin-bottom: 16px;
    }

    .form-label {
        display: block;
        font-size: 14px;
        font-weight: 600;
        color: #9fadbc;
        margin-bottom: 6px;
    }

    .form-input, .form-select {
        width: 100%;
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 12px;
        color: #e9ecef;
        font-size: 14px;
        box-sizing: border-box;
    }

        .form-input:focus, .form-select:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

    .modal-footer {
        padding: 16px 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: flex-end;
        gap: 8px;
    }

    .btn-save {
        background-color: #0079bf;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
    }

        .btn-save:hover {
            background-color: #026aa7;
        }

    .btn-cancel {
        background-color: transparent;
        color: #9fadbc;
        border: 1px solid #5e6c84;
        border-radius: 4px;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
    }

        .btn-cancel:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
</style>

<!-- Navbar -->
<div class="navbar">
    <div class="navbar-left">
        <h1 class="project-name">User Management</h1>
    </div>
</div>

<!-- Table Container -->
<div class="table-view-container">
    <div class="table-controls">
        <div class="left-controls">
            <button class="btn-add-user" onclick="openCreateModal()">
                <i class="bi bi-plus-lg"></i> Add New User
            </button>
        </div>
        <input type="text" class="search-box" id="userSearch" placeholder="Search users..." onkeyup="filterUsers()">
    </div>

    <!-- Users Table -->
    <div class="tasks-table-container">
        <table class="tasks-table">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Roles</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="usersTableBody">
                @if (Model.Users.Any())
                {
                    foreach (var user in Model.Users)
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                @foreach (var role in user.Roles)
                                {
                                    <span class="role-badge @(role.ToLower() == "administrator" ? "role-admin" : "role-user")">
                                        @role
                                    </span>
                                }
                            </td>
                            <td>
                                <button class="action-btn edit" onclick="openEditModal('@user.Id', '@user.UserName', '@user.Email', '@(user.Roles.FirstOrDefault()?.ToLower() == "administrator" ? 0 : 1)')" title="Edit User">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="action-btn delete" onclick="deleteUser('@user.Id')" title="Delete User">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="no-users">No users found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Create User Modal -->
<div class="modal-overlay" id="createUserModal">
    <div class="user-modal" onclick="event.stopPropagation()">
        <div class="modal-header">
            <h3 class="modal-title">Create New User</h3>
            <button class="modal-close-btn" onclick="closeCreateModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="createUserForm">
                <div class="form-group">
                    <label class="form-label">Username</label>
                    <input type="text" class="form-input" id="createUserName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="createUserEmail" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input type="password" class="form-input" id="createUserPassword" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Role</label>
                    <select class="form-select" id="createUserRole" required>
                        <option value="0">Administrator</option>
                        <option value="1" selected>Register User</option>
                    </select>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button class="btn-cancel" onclick="closeCreateModal()">Cancel</button>
            <button class="btn-save" onclick="createUser()">Create User</button>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal-overlay" id="editUserModal">
    <div class="user-modal" onclick="event.stopPropagation()">
        <div class="modal-header">
            <h3 class="modal-title">Edit User</h3>
            <button class="modal-close-btn" onclick="closeEditModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="editUserForm">
                <input type="hidden" id="editUserId">
                <div class="form-group">
                    <label class="form-label">Username</label>
                    <input type="text" class="form-input" id="editUserName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="editUserEmail" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Role</label>
                    <select class="form-select" id="editUserRole" required>
                        <option value="0">Administrator</option>
                        <option value="1">Register User</option>
                    </select>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button class="btn-cancel" onclick="closeEditModal()">Cancel</button>
            <button class="btn-save" onclick="updateUser()">Update User</button>
        </div>
    </div>
</div>

<script>
    let currentEditingUserId = null;

    function filterUsers() {
        const searchTerm = document.getElementById('userSearch').value.toLowerCase();
        const rows = document.querySelectorAll('#usersTableBody tr');

        rows.forEach(row => {
            const username = row.cells[0].textContent.toLowerCase();
            const email = row.cells[1].textContent.toLowerCase();

            if (username.includes(searchTerm) || email.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    function openCreateModal() {
        document.getElementById('createUserModal').classList.add('active');
        document.getElementById('createUserForm').reset();
    }

    function closeCreateModal() {
        document.getElementById('createUserModal').classList.remove('active');
    }

    function openEditModal(userId, userName, email, role) {
        currentEditingUserId = userId;
        document.getElementById('editUserId').value = userId;
        document.getElementById('editUserName').value = userName;
        document.getElementById('editUserEmail').value = email;
        document.getElementById('editUserRole').value = role;

        document.getElementById('editUserModal').classList.add('active');
    }

    function closeEditModal() {
        document.getElementById('editUserModal').classList.remove('active');
        currentEditingUserId = null;
    }

    async function createUser() {
        const userName = document.getElementById('createUserName').value;
        const email = document.getElementById('createUserEmail').value;
        const password = document.getElementById('createUserPassword').value;
        const role = document.getElementById('createUserRole').value;

        if (!userName || !email || !password) {
            alert('Please fill in all required fields');
            return;
        }

        try {
            // Use FormData instead of JSON
            const formData = new FormData();
            formData.append('UserName', userName);
            formData.append('Email', email);
            formData.append('Password', password);
            formData.append('Role', role);

            const response = await fetch('/User/Create', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                closeCreateModal();
                location.reload();
            } else {
                alert('Failed to create user: ' + result.message);
            }
        } catch (error) {
            console.error('Error creating user:', error);
            alert('Error creating user');
        }
    }

    async function updateUser() {
        const userName = document.getElementById('editUserName').value;
        const email = document.getElementById('editUserEmail').value;
        const role = document.getElementById('editUserRole').value;

        if (!userName || !email) {
            alert('Please fill in all required fields');
            return;
        }

        try {
            const formData = new FormData();
            formData.append('UserName', userName);
            formData.append('Email', email);
            formData.append('Role', role);

            const response = await fetch(`/User/Update/${currentEditingUserId}`, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                closeEditModal();
                location.reload();
            } else {
                alert('Failed to update user: ' + result.message);
            }
        } catch (error) {
            console.error('Error updating user:', error);
            alert('Error updating user');
        }
    }

    async function deleteUser(userId) {
        if (!confirm('Are you sure you want to delete this user?')) {
            return;
        }

        try {
            const formData = new FormData();
            formData.append('id', userId);

            const response = await fetch(`/User/Delete/${userId}`, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                location.reload();
            } else {
                alert('Failed to delete user: ' + result.message);
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            alert('Error deleting user');
        }
    }

    // Close modals when clicking outside
    document.querySelectorAll('.modal-overlay').forEach(modal => {
        modal.addEventListener('click', function (e) {
            if (e.target === this) {
                this.classList.remove('active');
            }
        });
    });
</script>