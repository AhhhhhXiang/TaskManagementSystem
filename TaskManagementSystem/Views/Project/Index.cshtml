@using TaskManagementAPI.Models.Project
@using TaskManagement.Data.Migrations.Models
@model TaskManagementSystem.Models.ViewModels.PaginatedProjectsViewModel

<style>
    body {
        background-color: #1a1d23;
        color: #e9ecef;
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow-x: hidden;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, sans-serif;
        scroll-behavior: smooth;
    }

    .projects-container {
        padding: 16px;
        max-width: 1200px;
        margin: 0 auto;
        width: 100%;
        box-sizing: border-box;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        padding-bottom: 80px;
    }

    .projects-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        padding-bottom: 12px;
        border-bottom: 1px solid #4a5568;
        flex-wrap: wrap;
        gap: 10px;
    }

    .projects-title {
        color: #e2e8f0;
        font-weight: 600;
        margin: 0;
        font-size: clamp(1.4rem, 3.5vw, 1.9rem);
        flex: 1 1 auto;
    }

    .filters-container {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        margin-bottom: 16px;
        align-items: center;
    }

    .filter-input {
        padding: 8px 12px;
        border-radius: 6px;
        border: 1px solid #4a5568;
        background-color: #2d3748;
        color: #e9ecef;
        font-size: 14px;
        min-width: 150px;
    }

        .filter-input:focus {
            outline: none;
            border-color: #0079bf;
        }

    .boards-container-wrapper {
        position: relative;
        width: 100%;
        flex: 1;
        overflow-y: auto;
        overflow-x: hidden;
        padding-right: 6px;
        margin-bottom: 20px;
        scrollbar-width: thin;
        min-height: 0;
        max-height: calc(100vh - 300px);
    }

        .boards-container-wrapper::-webkit-scrollbar {
            width: 6px;
        }

        .boards-container-wrapper::-webkit-scrollbar-thumb {
            background-color: #4a5568;
            border-radius: 4px;
        }

    .boards-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 16px;
        width: 100%;
        box-sizing: border-box;
        align-content: start;
        min-height: min-content;
    }

    .board-card, .create-board-card {
        border-radius: 8px;
        padding: 16px;
        cursor: pointer;
        min-height: 180px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        word-wrap: break-word;
        box-sizing: border-box;
    }

    .board-card {
        background-color: #2d3748;
        border-left: 4px solid #0079bf;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .board-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 3px 6px rgba(0,0,0,0.4);
            background-color: #374151;
        }

        .board-card h3 {
            margin-bottom: 8px;
            color: #e2e8f0;
            font-size: 1.1rem;
        }

        .board-card p {
            color: #a0aec0;
            font-size: 13px;
            margin: 0;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }

    .tasks-section {
        margin: 12px 0;
        flex-grow: 1;
    }

    .tasks-title {
        font-size: 0.85rem;
        color: #cbd5e0;
        margin-bottom: 6px;
        font-weight: 600;
    }

    .task-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .task-item {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 6px 0;
        border-bottom: 1px solid #4a5568;
        font-size: 0.8rem;
    }

        .task-item:last-child {
            border-bottom: none;
        }

    .task-name {
        color: #e2e8f0;
        flex: 1;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .task-details {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 2px;
        margin-left: 8px;
    }

    .task-deadline {
        font-size: 0.75rem;
        color: #f56565;
        white-space: nowrap;
    }

    .task-priority {
        font-size: 0.7rem;
        padding: 1px 4px;
        border-radius: 3px;
        white-space: nowrap;
    }

    .priority-high {
        background-color: #f56565;
        color: white;
    }

    .priority-medium {
        background-color: #ed8936;
        color: white;
    }

    .priority-low {
        background-color: #48bb78;
        color: white;
    }

    .members-section {
        margin-top: 8px;
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
    }

    .member-avatar {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        background-color: #0079bf;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        color: white;
        font-weight: bold;
    }

    .no-tasks {
        font-size: 0.8rem;
        color: #718096;
        font-style: italic;
        text-align: center;
        padding: 8px 0;
    }

    .no-projects-message {
        grid-column: 1 / -1;
        text-align: center;
        color: #718096;
        padding: 40px;
        font-style: italic;
    }

    .create-board-card {
        background-color: #4a5568;
        border: 2px dashed #718096;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
        min-height: 180px;
    }

        .create-board-card:hover {
            background-color: #5a6578;
        }

        .create-board-card i {
            font-size: 22px;
            color: #a0aec0;
            margin-bottom: 8px;
        }

        .create-board-card span {
            color: #a0aec0;
            font-weight: 500;
            font-size: 0.9rem;
        }

    /* Pagination */
    .pagination-container {
        position: sticky;
        bottom: 0;
        background-color: #1a1d23;
        display: flex;
        justify-content: center;
        margin-top: auto;
        gap: 8px;
        flex-wrap: wrap;
        padding: 15px 0;
        border-top: 1px solid #333;
        z-index: 50;
    }

        .pagination-container a {
            background-color: #2d3748;
            color: #e2e8f0;
            padding: 8px 12px;
            border-radius: 6px;
            text-decoration: none;
            transition: background-color 0.2s, transform 0.1s;
            font-size: 14px;
            min-width: 40px;
            text-align: center;
            border: 1px solid #4a5568;
        }

            .pagination-container a:hover {
                background-color: #4a5568;
                transform: translateY(-1px);
            }

            .pagination-container a.active {
                background-color: #0079bf;
                color: #fff;
                transform: scale(1.05);
                border-color: #0079bf;
            }

    .create-project-dropdown {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 90%;
        max-width: 360px;
        background-color: #2d3748;
        border-radius: 8px;
        padding: 16px;
        display: none;
        flex-direction: column;
        box-shadow: 0 4px 12px rgba(0,0,0,0.4);
        z-index: 999;
        gap: 12px;
    }

        .create-project-dropdown h4 {
            margin: 0 0 10px 0;
            font-size: 1rem;
            font-weight: 600;
            color: #e2e8f0;
            text-align: center;
        }

        .create-project-dropdown label {
            font-size: 0.85rem;
            color: #e2e8f0;
            margin-bottom: 4px;
        }

        .create-project-dropdown input,
        .create-project-dropdown textarea {
            width: 100%;
            padding: 8px 10px;
            border-radius: 4px;
            border: 1px solid #718096;
            background-color: #1a1d23;
            color: #e9ecef;
            resize: none;
        }

        .create-project-dropdown textarea {
            min-height: 80px;
        }

        .create-project-dropdown .close-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            background: none;
            color: #fff;
            font-size: 18px;
            cursor: pointer;
            border: none;
        }

        .create-project-dropdown button.submit-btn {
            background-color: #0079bf;
            color: white;
            border: none;
            padding: 10px 14px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.95rem;
        }

            .create-project-dropdown button.submit-btn:hover {
                background-color: #669DF1;
            }

    .btn-add-task {
        background-color: #0079bf;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
        text-decoration: none;
    }

        .btn-add-task:hover {
            background-color: #026aa7;
        }

        .btn-add-task:active {
            background-color: #055a8c;
        }


    .filter-select {
        padding: 8px 12px;
        border-radius: 6px;
        border: 1px solid #4a5568;
        background-color: #2d3748;
        color: #e9ecef;
        font-size: 14px;
        min-width: 150px;
        cursor: pointer;
    }

        .filter-select:focus {
            outline: none;
            border-color: #0079bf;
        }

        .filter-select option {
            background-color: #2d3748;
            color: #e9ecef;
            padding: 8px;
        }

    /* Responsive styles */
    @@media (max-height: 800px) {
        .boards-container-wrapper {
            max-height: 60vh;
            min-height: 300px;
        }
    }

    @@media (max-height: 700px) {
        .boards-container-wrapper {
            max-height: 55vh;
            min-height: 250px;
        }
    }

    @@media (max-height: 600px) {
        .boards-container-wrapper {
            max-height: 50vh;
            min-height: 200px;
        }
    }

    @@media (max-height: 500px) {
        .boards-container-wrapper {
            max-height: 45vh;
            min-height: 150px;
        }
    }

    @@media (max-height: 400px) {
        .boards-container-wrapper {
            max-height: 35vh;
            min-height: 120px;
        }
    }

    @@media (max-width: 768px) {
        .boards-container-wrapper {
            max-height: calc(100vh - 250px);
        }
    
        @@media (max-height: 700px) {
            .boards-container-wrapper {
                max-height: 50vh;
            }
        }
    }
</style>

<div class="projects-container">
    <div class="projects-header">
        <h1 class="projects-title">Your Projects</h1>
        <button class="btn-add-task" onclick="exportProjectsToCSV()" style="background-color: #28a745; margin-left: auto;">
            <i class="bi bi-file-earmark-spreadsheet"></i> Export as CSV
        </button>
    </div>

    <!-- Filters Section -->
    <div class="filters-container">
        <input type="text" id="nameFilter" class="filter-input" placeholder="Filter by project name..."
               value="@Context.Request.Query["projectName"]" />

        <select id="userFilter" class="filter-select">
            <option value="">All users</option>
            @if (ViewBag.AllUsers != null)
            {
                foreach (var user in ViewBag.AllUsers)
                {
                    <option value="@user.Id"
                            selected="@(Context.Request.Query["userId"] == user.Id.ToString())">
                        @user.UserName
                    </option>
                }
            }
        </select>

        <select id="priorityFilter" class="filter-select">
            <option value="">All priorities</option>
            <option value="High" selected="@(Context.Request.Query["priority"] == "High")">High</option>
            <option value="Medium" selected="@(Context.Request.Query["priority"] == "Medium")">Medium</option>
            <option value="Low" selected="@(Context.Request.Query["priority"] == "Low")">Low</option>
        </select>
        <button id="clearFilters" class="filter-input" style="background-color: #4a5568; cursor: pointer;">Clear Filters</button>
    </div>

    <div class="boards-container-wrapper">
        <div class="boards-container" id="boardsContainer">
            <div class="create-board-card" id="createBoardCard">
                <i class="bi bi-plus-lg"></i>
                <span>Create new project</span>
            </div>

            @if (Model.Projects.Any())
            {
                foreach (var project in Model.Projects)
                {
                    // Get top 3 tasks
                    var topTasks = project.projectTasks?
                    .OrderBy(t => t.DueDate ?? DateTime.MaxValue)
                    .ThenByDescending(t => t.PriorityStatus)
                    .Take(3)
                    .ToList() ?? new List<ProjectTaskReturnModel>();

                    var allMembers = new List<dynamic>();

                    if (project.projectUsers != null && project.projectUsers.Any())
                    {
                        allMembers.AddRange(project.projectUsers.Select(pu => new
                        {
                            Id = pu.Id,
                            Name = pu.UserName,
                            Type = "project"
                        }));
                    }

                    if (project.projectTasks != null)
                    {
                        var taskMembers = project.projectTasks
                        .Where(t => t.taskUsers != null && t.taskUsers.Any())
                        .SelectMany(t => t.taskUsers)
                        .Select(tu => new
                        {
                            Id = tu.Id,
                            Name = tu.UserName,
                            Type = "task"
                        });
                        allMembers.AddRange(taskMembers);
                    }

                    var uniqueMembers = allMembers
                    .GroupBy(m => m.Id)
                    .Select(g => g.First())
                    .Take(5)
                    .ToList();

                    var taskPriorities = project.projectTasks?
                    .Where(t => t.PriorityStatus != null)
                    .Select(t => t.PriorityStatus.ToString())
                    .Distinct()
                    .ToList() ?? new List<string>();

                    <div class="board-card" data-project-id="@project.Id"
                         data-project-name="@project.Name.ToLower()"
                         data-assigned-users="@string.Join(" ", uniqueMembers.Select(m => m.Id.ToString()))"
                         data-task-priorities="@string.Join(" ", taskPriorities.Select(p => p.ToLower()))">
                        <div>
                            <h3>@project.Name</h3>
                            <p>@(string.IsNullOrEmpty(project.Description) ? "The guy is so lazy, nothing is left..." : project.Description)</p>

                            <div class="tasks-section">
                                <div class="tasks-title">TOP TASKS:</div>
                                @if (topTasks.Any())
                                {
                                    <ul class="task-list">
                                        @foreach (var task in topTasks)
                                        {
                                            <li class="task-item">
                                                <span class="task-name" title="@task.Title">@task.Title</span>
                                                <div class="task-details">
                                                    @if (task.DueDate.HasValue)
                                                    {
                                                        <span class="task-deadline" title="Due: @task.DueDate.Value.ToString("MMM dd, yyyy")">
                                                            @task.DueDate.Value.ToString("MMM dd")
                                                        </span>
                                                    }
                                                    @if (task.PriorityStatus != null)
                                                    {
                                                        <span class="task-priority priority-@task.PriorityStatus.ToString().ToLower()">
                                                            @task.PriorityStatus
                                                        </span>
                                                    }
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <div class="no-tasks">No tasks yet</div>
                                }
                            </div>

                            @if (uniqueMembers.Any())
                            {
                                <div class="members-section">
                                    @foreach (var member in uniqueMembers)
                                    {
                                        <div class="member-avatar" title="@member.Name">
                                            @if (!string.IsNullOrEmpty(member.Name))
                                            {
                                                @member.Name.Substring(0, 1).ToUpper()
                                            }
                                            else
                                            {
                                                <text>U</text>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-projects-message">
                    @if (!string.IsNullOrEmpty(Context.Request.Query["projectName"]) || !string.IsNullOrEmpty(Context.Request.Query["userId"]) || !string.IsNullOrEmpty(Context.Request.Query["priority"]))
                    {
                        <text>No projects found matching your search criteria.</text>
                    }
                    else
                    {
                        <text>No projects found. Create your first project to get started!</text>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
        @if (Model.TotalPages > 1)
        {
            @if (Model.Page > 1)
            {
                <a href="@Url.Action("Index", new {
                    page = Model.Page - 1,
                    projectName = Context.Request.Query["projectName"],
                    userId = Context.Request.Query["userId"],
                    priority = Context.Request.Query["priority"]
                })">&laquo; Prev</a>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <a href="@Url.Action("Index", new {
                    page = i,
                    projectName = Context.Request.Query["projectName"],
                    userId = Context.Request.Query["userId"],
                    priority = Context.Request.Query["priority"]
                })"
                   class="@(i == Model.Page ? "active" : "")">@i</a>
            }

            @if (Model.Page < Model.TotalPages)
            {
                <a href="@Url.Action("Index", new {
                    page = Model.Page + 1,
                    projectName = Context.Request.Query["projectName"],
                    userId = Context.Request.Query["userId"],
                    priority = Context.Request.Query["priority"]
                })">Next &raquo;</a>
            }
        }
    </div>

    <!-- Create project dropdown -->
    <div class="create-project-dropdown" id="projectDropdown">
        <h4 class="text-center">Create Project</h4>
        <button class="close-btn" id="closeDropdown">&times;</button>
        <label for="projectName">Project Name</label>
        <input type="text" id="projectName" placeholder="Project name" />
        <label for="projectDescription">Description</label>
        <textarea id="projectDescription" placeholder="Project description"></textarea>
        <button class="submit-btn" id="submitProject">Create</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const createBoardCard = document.getElementById('createBoardCard');
        const projectDropdown = document.getElementById('projectDropdown');
        const closeDropdown = document.getElementById('closeDropdown');
        const projectNameInput = document.getElementById('projectName');

        // Filter elements
        const nameFilter = document.getElementById('nameFilter');
        const userFilter = document.getElementById('userFilter');
        const priorityFilter = document.getElementById('priorityFilter');
        const clearFilters = document.getElementById('clearFilters');

        function setInitialFilterValues() {
            const urlParams = new URLSearchParams(window.location.search);
            nameFilter.value = urlParams.get('projectName') || '';
            userFilter.value = urlParams.get('userId') || '';
            priorityFilter.value = urlParams.get('priority') || '';
        }

        // Search
        function performSearch() {
            const nameValue = nameFilter.value;
            const userIdValue = userFilter.value;
            const priorityValue = priorityFilter.value;

            const params = new URLSearchParams();
            if (nameValue) params.append('projectName', nameValue);
            if (userIdValue) params.append('userId', userIdValue);
            if (priorityValue) params.append('priority', priorityValue);
            params.append('page', '1');

            window.location.href = '@Url.Action("Index", "Project")' + '?' + params.toString();
        }

        // Clear filters and reload
        function clearFiltersHandler() {
            window.location.href = '@Url.Action("Index", "Project")';
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        const debouncedSearch = debounce(performSearch, 500);

        nameFilter.addEventListener('input', debouncedSearch);
        userFilter.addEventListener('change', performSearch);
        priorityFilter.addEventListener('change', performSearch);

        clearFilters.addEventListener('click', clearFiltersHandler);

        setInitialFilterValues();

        function showDropdown() {
            const rect = createBoardCard.getBoundingClientRect();
            const wrapperRect = document.querySelector('.boards-container-wrapper').getBoundingClientRect();
            const dropdownWidth = projectDropdown.offsetWidth;

            if (window.innerWidth <= 768) {
                projectDropdown.style.left = '50%';
                projectDropdown.style.top = '60px';
                projectDropdown.style.transform = 'translateX(-50%)';
            } else {
                let leftPos = rect.left - wrapperRect.left - dropdownWidth - 8;
                if (leftPos < 0) leftPos = rect.right - wrapperRect.left + 8;
                let topPos = rect.top - wrapperRect.top;

                projectDropdown.style.left = leftPos + 'px';
                projectDropdown.style.top = topPos + 'px';
                projectDropdown.style.transform = 'none';
            }

            projectDropdown.style.display = 'flex';
            projectNameInput.focus();
        }

        createBoardCard.addEventListener('click', function (e) {
            e.stopPropagation();
            projectDropdown.style.display === 'flex' ? projectDropdown.style.display = 'none' : showDropdown();
        });

        closeDropdown.addEventListener('click', function (e) {
            e.stopPropagation();
            projectDropdown.style.display = 'none';
        });

        document.addEventListener('click', function () {
            projectDropdown.style.display = 'none';
        });

        projectDropdown.addEventListener('click', function (e) {
            e.stopPropagation();
        });

        window.addEventListener('resize', function () {
            projectDropdown.style.display = 'none';
        });

        document.getElementById('submitProject').addEventListener('click', async function () {
            const name = document.getElementById('projectName').value.trim();
            const desc = document.getElementById('projectDescription').value.trim();
            if (!name) { alert('Project name is required'); return; }

            try {
                const formData = new FormData();
                formData.append('projectName', name);
                formData.append('projectDescription', desc);

                const response = await fetch('@Url.Action("CreateProject", "Project")', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    const projectId = result.projectId;
                    if (projectId) {
                        window.location.href = '@Url.Action("ProjectDetails", "Project")' + '?id=' + projectId;
                    } else {
                        window.location.reload();
                    }
                } else {
                    alert(result.message || 'Error creating project');
                }
            } catch (err) {
                console.error('Error creating project:', err);
                alert('Error creating project. Please try again.');
            }
        });

        document.querySelectorAll('.board-card').forEach(card => {
            card.addEventListener('click', function () {
                const projectId = this.getAttribute('data-project-id');
                if (!projectId) return;

                window.location.href = '@Url.Action("ProjectDetails", "Project")' + '?id=' + projectId;
            });
        });
    });

    // Export projects to CSV
    async function exportProjectsToCSV() {
        const exportBtn = event.target.closest('button') || event.target;
        const originalText = exportBtn.innerHTML;

        try {
            exportBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Exporting...';
            exportBtn.disabled = true;

            const loadingMsg = document.createElement('div');
            loadingMsg.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #28a745; color: white; padding: 10px 15px; border-radius: 4px; z-index: 1000;';
            loadingMsg.innerHTML = '<i class="bi bi-hourglass-split"></i> Generating CSV export...';
            document.body.appendChild(loadingMsg);

            // Get current filter values
            const nameFilter = document.getElementById('nameFilter').value;
            const userFilter = document.getElementById('userFilter').value;
            const priorityFilter = document.getElementById('priorityFilter').value;

            // Build URL for GetAllProjects action with current filters
            let apiUrl = '/Project/GetAllProjects';

            const params = new URLSearchParams();
            if (nameFilter) params.append('projectName', nameFilter);
            if (userFilter) params.append('userId', userFilter);
            if (priorityFilter) params.append('priority', priorityFilter);

            if (params.toString()) {
                apiUrl += '?' + params.toString();
            }

            // Call MVC controller to get all filtered projects
            const response = await fetch(apiUrl);

            if (!response.ok) {
                throw new Error(`Export failed: ${response.status}`);
            }

            const result = await response.json();

            if (!result.success) {
                throw new Error(result.message || 'Failed to export projects');
            }

            if (!result.projects || result.projects.length === 0) {
                throw new Error('No projects found to export with current filters');
            }

            // Generate CSV from the current filtered results
            const csvContent = generateProjectsCSV(result.projects);
            const timestamp = new Date().toISOString().split('T')[0].replace(/-/g, '');
            const filename = `projects_export_${timestamp}.csv`;

            // Download the CSV file
            downloadCSV(csvContent, filename);

            loadingMsg.innerHTML = '<i class="bi bi-check-circle"></i> CSV export completed!';
            loadingMsg.style.background = '#28a745';

            setTimeout(() => {
                if (document.body.contains(loadingMsg)) {
                    document.body.removeChild(loadingMsg);
                }
            }, 3000);

        } catch (error) {
            console.error('Error exporting projects CSV:', error);

            const existingMsg = document.querySelector('[style*="position: fixed"]');
            if (existingMsg) document.body.removeChild(existingMsg);

            alert(`Error exporting projects: ${error.message}`);
        } finally {
            exportBtn.innerHTML = originalText;
            exportBtn.disabled = false;
        }
    }

    // Generate CSV content from projects data
    function generateProjectsCSV(projects) {
        const headers = ['Project Name', 'Task Title', 'Task Priority', 'Task Due Date', 'Task Status', 'Assigned Member'];

        let csvContent = headers.map(escapeCsvField).join(',') + '\n';

        projects.forEach(project => {
            console.log(project);

            const projectMembers = [];
            if (project.projectUsers && project.projectUsers.length > 0) {
                project.projectUsers.forEach(user => {
                    if (user.userName) {
                        projectMembers.push(user.userName);
                    }
                });
            }

            if (project.projectTasks && project.projectTasks.length > 0) {
                project.projectTasks.forEach(task => {
                    const taskMembers = [];
                    if (task.taskUsers && task.taskUsers.length > 0) {
                        task.taskUsers.forEach(user => {
                            if (user.userName) {
                                taskMembers.push(user.userName);
                            }
                        });
                    }

                    const membersToUse = taskMembers.length > 0 ? taskMembers : projectMembers;

                    if (membersToUse.length > 0) {
                        membersToUse.forEach(member => {
                            const row = [
                                project.name || '',
                                task.title || 'Untitled Task',
                                getPriorityDisplay(task.priorityStatus),
                                formatDateForCSV(task.dueDate),
                                getStatusDisplay(task.progressStatus),
                                member
                            ];

                            csvContent += row.map(escapeCsvField).join(',') + '\n';
                        });
                    } else {
                        const row = [
                            project.name || '',
                            task.title || 'Untitled Task',
                            getPriorityDisplay(task.priorityStatus),
                            formatDateForCSV(task.dueDate),
                            getStatusDisplay(task.progressStatus),
                            ''
                        ];

                        csvContent += row.map(escapeCsvField).join(',') + '\n';
                    }
                });
            } else {
                if (projectMembers.length > 0) {
                    projectMembers.forEach(member => {
                        const row = [
                            project.name || '',
                            'No tasks',
                            '',
                            '',
                            '',
                            member
                        ];

                        csvContent += row.map(escapeCsvField).join(',') + '\n';
                    });
                } else {
                    const row = [
                        project.name || '',
                        'No tasks',
                        '',
                        '',
                        '',
                        ''
                    ];

                    csvContent += row.map(escapeCsvField).join(',') + '\n';
                }
            }
        });

        return csvContent;
    }

    // Download CSV file
    function downloadCSV(csvContent, filename) {
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);

        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        setTimeout(() => URL.revokeObjectURL(url), 100);
    }

    // Escape CSV field
    function escapeCsvField(field) {
        if (field === null || field === undefined) return '';

        const stringField = String(field);

        if (stringField.includes(',') || stringField.includes('\n') || stringField.includes('"')) {
            return '"' + stringField.replace(/"/g, '""') + '"';
        }

        return stringField;
    }

    // Format date for CSV
    function formatDateForCSV(dateString) {
        if (!dateString) return '';

        const date = new Date(dateString);
        if (isNaN(date.getTime())) return '';

        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');

        return `${year}-${month}-${day}`;
    }

    // Get priority display name
    function getPriorityDisplay(priorityStatus) {
        const priorityValue = typeof priorityStatus === 'string' ? priorityStatus : String(priorityStatus);

        const priorityMap = {
            '1': 'Low',
            'Low': 'Low',
            '2': 'Medium',
            'Medium': 'Medium',
            '3': 'High',
            'High': 'High'
        };

        return priorityMap[priorityValue] || 'Low';
    }

    // Get status display name
    function getStatusDisplay(progressStatus) {
        const statusValue = typeof progressStatus === 'string' ? parseInt(progressStatus) : progressStatus;

        const statusNames = {
            1: 'To Do',
            2: 'In Progress',
            3: 'Done',
            4: 'To be Reviewd',
            5: 'To be fixed'
        };

        return statusNames[statusValue] || 'Unknown';
    }
</script>