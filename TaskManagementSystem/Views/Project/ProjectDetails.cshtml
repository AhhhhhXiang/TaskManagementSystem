@using TaskManagement.Data.Migrations.Models
@model TaskManagementSystem.Models.ViewModels.ProjectDetailsViewModel

<style>
    body {
        background-color: #1a1d23;
        color: #e9ecef;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', sans-serif;
        margin: 0;
        padding: 0;
        height: 100vh;
        overflow: hidden;
    }

    .navbar {
        background-color: #1a1d23;
        padding: 8px 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .navbar-left {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .project-name {
        color: #ffffff;
        font-size: 18px;
        font-weight: 700;
        margin: 0;
        padding: 6px 12px;
        border-radius: 3px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .project-name-input {
        font-size: 18px;
        font-weight: 700;
        color: #ffffff;
        background-color: transparent;
        border: 1px solid #666;
        border-radius: 4px;
        padding: 6px 10px;
        outline: none;
        box-sizing: border-box;
    }

    .project-name:hover {
        background-color: rgba(255, 255, 255, 0.3);
    }

    .navbar-right {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .user-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
    }

    .more-btn {
        background: none;
        border: none;
        color: #aaa;
        font-size: 20px;
        cursor: pointer;
        padding: 2px 4px;
        border-radius: 6px;
        transition: background-color 0.2s;
    }

        .more-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #fff;
        }

    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #2b2f36;
        min-width: 160px;
        border-radius: 6px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        z-index: 9999;
    }

        .dropdown-content a {
            color: #ddd;
            padding: 10px 14px;
            text-decoration: none;
            display: block;
            font-size: 14px;
            transition: background-color 0.2s;
        }

            .dropdown-content a:hover {
                background-color: rgba(255,255,255,0.1);
            }

    /* Table View Styles */
    .table-view-container {
        background-color: #1a1d23;
        border-radius: 8px;
        padding: 16px;
        margin: 16px;
        height: calc(100vh - 120px);
        display: flex;
        flex-direction: column;
    }

    .table-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        flex-wrap: wrap;
        gap: 12px;
    }

    .left-controls {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .filter-controls {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    .filter-select, .search-box, .date-input {
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 12px;
        color: #e9ecef;
        min-width: 140px;
        max-width: 100%;
        box-sizing: border-box;
        font-size: 14px;
        height: 40px;
    }

        .filter-select:focus, .search-box:focus, .date-input:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

    .filter-select option {
        font-size: 14px;
        padding: 8px;
    }

    .date-input {
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 12px;
        color: #e9ecef;
        min-width: 140px;
        max-width: 100%;
        box-sizing: border-box;
        font-size: 14px;
        height: 40px;
        color-scheme: dark;
        cursor: pointer;
        position: relative;
    }

        .date-input:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

        .date-input::-webkit-calendar-picker-indicator {
            cursor: pointer;
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        .date-input::-moz-calendar-picker-indicator {
            cursor: pointer;
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

    .date-filter {
        display: flex;
        gap: 8px;
        align-items: center;
        flex-wrap: wrap;
        justify-content: center;
    }

    .search-box {
        min-width: 200px;
        flex: 1;
        max-width: 300px;
    }

    .tasks-table-container {
        flex: 1;
        overflow: auto;
        background-color: #101204;
        border-radius: 8px;
        position: relative;
    }

    .tasks-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 800px;
    }

        .tasks-table th {
            background-color: #1a1d23;
            padding: 12px 16px;
            text-align: left;
            font-weight: 600;
            color: #9fadbc;
            border-bottom: 1px solid #444;
            cursor: pointer;
            user-select: none;
            position: sticky;
            top: 0;
            z-index: 10;
            white-space: nowrap;
        }

            .tasks-table th:hover {
                background-color: #2b2f36;
            }

            .tasks-table th.sort-asc::after {
                content: " ↑";
                color: #0079bf;
                font-weight: bold;
            }

            .tasks-table th.sort-desc::after {
                content: " ↓";
                color: #0079bf;
                font-weight: bold;
            }

        .tasks-table td {
            padding: 12px 16px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            color: #e9ecef;
            vertical-align: top;
        }

        .tasks-table tbody tr {
            transition: background-color 0.2s;
            cursor: pointer;
        }

            .tasks-table tbody tr:hover {
                background-color: rgba(255, 255, 255, 0.05);
            }

    /* Priority Badges */
    .priority-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
        text-align: center;
        min-width: 60px;
        display: inline-block;
    }

    .priority-high {
        background-color: #ffebe6;
        color: #bf2600;
    }

    .priority-medium {
        background-color: #fff4e6;
        color: #ff991f;
    }

    .priority-low {
        background-color: #e6f4f1;
        color: #00875a;
    }

    /* Status Badges */
    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
        text-align: center;
        min-width: 80px;
        display: inline-block;
    }

    .status-todo {
        background-color: #f4f5f7;
        color: #5e6c84;
    }

    .status-inprogress {
        background-color: #e6f4ff;
        color: #0079bf;
    }

    .status-done {
        background-color: #e6f4f1;
        color: #00875a;
    }

    .status-review {
        background-color: #fff4e6;
        color: #ff991f;
    }

    .status-corrected {
        background-color: #ffebe6;
        color: #bf2600;
    }

    /* User Avatars in Table */
    .table-user-avatar {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 10px;
        margin-right: 4px;
    }

    .user-cell {
        display: flex;
        align-items: center;
        gap: 4px;
        margin-bottom: 4px;
    }

    .users-container {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px;
        margin-top: 16px;
        padding: 16px;
        flex-wrap: wrap;
        min-height: 60px; /* Ensure enough space */
    }

    .pagination-btn {
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 16px;
        color: #e9ecef;
        cursor: pointer;
        transition: background-color 0.2s;
        min-width: 100px;
        font-size: 14px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .pagination-btn:hover:not(:disabled) {
            background-color: #2b2f36;
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .pagination-info {
        color: #9fadbc;
        font-size: 14px;
        margin: 0 12px;
        white-space: nowrap;
        padding: 8px 0;
    }

    /* Comments Section in Table */
    .comments-cell {
        max-width: 200px;
    }

    .comments-preview {
        font-size: 12px;
        color: #9fadbc;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        line-height: 1.4;
    }

    .view-comments-btn {
        background: none;
        border: none;
        color: #0079bf;
        cursor: pointer;
        font-size: 12px;
        padding: 2px 4px;
        border-radius: 3px;
        margin-top: 4px;
    }

        .view-comments-btn:hover {
            background-color: rgba(0, 121, 191, 0.1);
        }

    /* Modal Styles */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 1000;
        overflow-y: auto;
        padding: 48px 8px 80px;
        align-items: flex-start;
        justify-content: center;
    }

        .modal-overlay.active {
            display: flex !important;
        }

    .task-modal {
        background-color: #2b2f36;
        border-radius: 8px;
        width: 768px;
        max-width: calc(100vw - 16px);
        max-height: calc(100vh - 40px);
        margin: 0 auto;
        position: relative;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
        min-height: auto;
        z-index: 10001;
        overflow: auto;
    }

    .modal-header {
        padding: 12px 40px 8px 56px;
        position: relative;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .modal-header-icon {
        position: absolute;
        left: 16px;
        top: 16px;
        font-size: 20px;
        color: #b6c2cf;
    }

    .modal-title-section {
        margin-bottom: 4px;
    }

    .modal-title {
        font-size: 20px;
        font-weight: 600;
        color: #e9ecef;
        margin: 0;
        padding: 8px 12px;
        border: none;
        background: transparent;
        width: 100%;
        line-height: 24px;
        border-radius: 3px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .modal-title:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .modal-title:focus {
            background-color: #1a1d23;
            outline: 2px solid #0079bf;
            cursor: text;
        }

    .modal-subtitle {
        font-size: 14px;
        color: #9fadbc;
        margin: 0;
        padding: 0 12px 8px;
    }

    .modal-close-btn {
        position: absolute;
        right: 8px;
        top: 8px;
        background: transparent;
        border: none;
        width: 32px;
        height: 32px;
        border-radius: 3px;
        cursor: pointer;
        color: #9fadbc;
        font-size: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
    }

        .modal-close-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

    .modal-body {
        display: flex;
        padding: 12px 16px 16px 36px;
        gap: 16px;
        position: relative;
        max-height: calc(100vh - 200px);
        overflow-y: auto;
    }

    .modal-main {
        flex: 1;
        min-width: 0;
    }

    .modal-sidebar {
        width: 168px;
        flex-shrink: 0;
        padding: 0 8px 8px 24px;
    }

    /* Comments Modal */
    .comments-modal {
        max-width: 500px;
    }

    .comments-list {
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 16px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 6px;
        padding: 8px;
    }

    .comment-item {
        background-color: #1a1d23;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 8px;
        border-left: 3px solid #0079bf;
    }

    .comment-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .comment-author {
        font-weight: 600;
        color: #e9ecef;
        font-size: 14px;
    }

    .comment-date {
        color: #9fadbc;
        font-size: 11px;
    }

    .comment-text {
        color: #e9ecef;
        font-size: 14px;
        line-height: 1.4;
        white-space: pre-wrap;
    }

    .comment-input {
        width: 100%;
        background-color: #1a1d23;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 12px;
        color: #e9ecef;
        font-size: 14px;
        resize: vertical;
        min-height: 80px;
        margin-bottom: 12px;
        font-family: inherit;
    }

        .comment-input:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

    .comment-actions {
        display: flex;
        justify-content: flex-end;
        gap: 8px;
    }

    .no-comments {
        text-align: center;
        color: #9fadbc;
        font-style: italic;
        padding: 20px;
    }

    /* Button Styles */
    .btn-save {
        background-color: #0079bf;
        color: #ffffff;
        border: none;
        border-radius: 3px;
        padding: 6px 12px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        margin-right: 4px;
        transition: background-color 0.2s;
    }

        .btn-save:hover {
            background-color: #026aa7;
        }

    .btn-cancel {
        background-color: transparent;
        color: #ffffff;
        border: none;
        border-radius: 3px;
        padding: 6px 12px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        margin-right: 4px;
        transition: background-color 0.2s;
    }

        .btn-cancel:hover {
            background-color: #7b848f;
        }

    /* Avatar Colors */
    .avatar-color-1 {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .avatar-color-2 {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }

    .avatar-color-3 {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }

    .avatar-color-4 {
        background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
    }

    .avatar-color-5 {
        background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
    }

    .avatar-color-6 {
        background: linear-gradient(135deg, #30cfd0 0%, #330867 100%);
    }

    /* Add Member Modal */
    .add-member-modal {
        background-color: #2b2f36;
        border-radius: 8px;
        width: 450px;
        max-width: 90vw;
        margin: 0 auto;
        position: relative;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
        z-index: 10001;
        overflow: hidden;
    }

    .add-member-modal-header {
        padding: 16px 20px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .add-member-modal-title {
        font-size: 18px;
        font-weight: 600;
        color: #e9ecef;
        margin: 0;
    }

    .add-member-modal-close-btn {
        background: transparent;
        border: none;
        color: #9fadbc;
        font-size: 20px;
        cursor: pointer;
        padding: 4px;
        border-radius: 3px;
        transition: background-color 0.2s;
    }

        .add-member-modal-close-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

    .add-member-modal-body {
        padding: 20px;
        max-height: 60vh;
        overflow-y: auto;
    }

    .add-member-search {
        width: 100%;
        background-color: #1a1d23;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 12px;
        color: #e9ecef;
        font-size: 14px;
        margin-bottom: 16px;
        box-sizing: border-box;
    }

        .add-member-search:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

    .add-member-users-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .add-member-user-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s;
        border: 1px solid transparent;
    }

        .add-member-user-item:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .add-member-user-item.selected {
            background-color: rgba(0, 121, 191, 0.2);
            border-color: #0079bf;
        }

    .add-member-user-avatar {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 14px;
        flex-shrink: 0;
    }

    .add-member-user-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 2px;
    }

    .add-member-user-name {
        font-size: 14px;
        font-weight: 500;
        color: #e9ecef;
    }

    .add-member-user-email {
        font-size: 12px;
        color: #9fadbc;
    }

    .add-member-checkbox {
        width: 18px;
        height: 18px;
        border: 2px solid #5e6c84;
        border-radius: 3px;
        background: transparent;
        cursor: pointer;
        flex-shrink: 0;
        position: relative;
    }

    .add-member-user-item.selected .add-member-checkbox {
        background-color: #0079bf;
        border-color: #0079bf;
    }

        .add-member-user-item.selected .add-member-checkbox::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

    .add-member-no-users {
        text-align: center;
        color: #9fadbc;
        font-size: 14px;
        padding: 20px;
        font-style: italic;
    }

    .add-member-no-admin-message {
        text-align: center;
        color: #9fadbc;
        font-size: 14px;
        padding: 20px;
    }

    .modal-section {
        margin-top: 24px;
    }

    .modal-section-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 8px;
        margin-bottom: 8px;
    }

    .modal-section-icon {
        font-size: 16px;
        color: #b6c2cf;
    }

    .modal-section-title {
        font-size: 12px;
        font-weight: 600;
        color: #9fadbc;
        margin: 0;
    }

    .description-box {
        background-color: #1a1d23;
        border: none;
        border-radius: 3px;
        padding: 8px 12px;
        min-height: 108px;
        color: #e9ecef;
        font-size: 14px;
        line-height: 20px;
        cursor: pointer;
        transition: background-color 0.2s;
        width: 100%;
        font-family: inherit;
        resize: vertical;
    }

        .description-box:hover {
            background-color: #101204;
        }

        .description-box:focus {
            outline: 2px solid #0079bf;
            background-color: #1a1d23;
            cursor: text;
        }

        .description-box.empty {
            color: #718096;
        }

    .dates-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 8px;
    }

    .date-item {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .date-label {
        font-size: 12px;
        font-weight: 600;
        color: #9fadbc;
    }

    .date-display {
        background-color: #1a1d23;
        border: none;
        border-radius: 3px;
        padding: 6px 12px;
        font-size: 14px;
        color: #e9ecef;
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
        gap: 4px;
    }

        .date-display:hover {
            background-color: #101204;
        }

        .date-display.overdue {
            background-color: #ffebe6;
            color: #bf2600;
        }

        .date-display.due-soon {
            background-color: #fff4e6;
            color: #ff991f;
        }

    .sidebar-section-title {
        font-size: 12px;
        font-weight: 600;
        color: #9fadbc;
        margin: 0 0 8px 0;
    }

    .sidebar-btn {
        width: 100%;
        background-color: rgba(255, 255, 255, 0.05);
        border: none;
        border-radius: 3px;
        padding: 6px 12px;
        margin-bottom: 8px;
        color: #e9ecef;
        font-size: 14px;
        cursor: pointer;
        text-align: left;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .sidebar-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

    .sidebar-icon {
        font-size: 16px;
        width: 16px;
        text-align: center;
    }

    .sidebar-divider {
        height: 1px;
        background-color: #e0e0e0;
        margin: 12px 0;
        border: none;
    }

    .edit-controls {
        margin-top: 8px;
        display: none;
    }

        .edit-controls.active {
            display: block;
        }

    .sidebar-dropdown {
        position: absolute;
        background-color: #2b2f36;
        border-radius: 8px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        z-index: 10002;
        min-width: 240px;
        padding: 12px;
        display: none;
    }

        .sidebar-dropdown.active {
            display: block;
        }

    .dropdown-header {
        font-size: 14px;
        font-weight: 600;
        color: #e9ecef;
        margin-bottom: 8px;
        padding-bottom: 8px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        text-align: center;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .dropdown-close-btn {
        background: none;
        border: none;
        color: #9fadbc;
        cursor: pointer;
        font-size: 16px;
        padding: 4px;
        border-radius: 3px;
        transition: background-color 0.2s;
    }

        .dropdown-close-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

    .dropdown-content {
        max-height: 300px;
        overflow-y: auto;
    }

    .user-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 6px 8px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .user-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .user-item.selected {
            background-color: rgba(0, 121, 191, 0.3);
        }

    .search-bar {
        width: 100%;
        background-color: #1a1d23;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 6px 8px;
        color: #e9ecef;
        font-size: 14px;
        margin-bottom: 8px;
        box-sizing: border-box;
    }

        .search-bar:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

    .date-picker-container {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .file-upload-area {
        border: 2px dashed #666;
        border-radius: 6px;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        transition: border-color 0.2s;
    }

        .file-upload-area:hover {
            border-color: #0079bf;
        }

        .file-upload-area.dragover {
            border-color: #0079bf;
            background-color: rgba(0, 121, 191, 0.1);
        }

    .upload-icon {
        font-size: 24px;
        color: #666;
        margin-bottom: 8px;
    }

    .status-option {
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
        margin-bottom: 4px;
    }

        .status-option:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .status-option.selected {
            background-color: rgba(0, 121, 191, 0.3);
        }

    .confirmation-dialog {
        text-align: center;
    }

    .confirmation-buttons {
        display: flex;
        gap: 8px;
        margin-top: 12px;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 6px 12px;
        cursor: pointer;
        flex: 1;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 6px 12px;
        cursor: pointer;
        flex: 1;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .attachment-preview {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px;
        background-color: #1a1d23;
        border-radius: 4px;
        margin-bottom: 8px;
    }

    .attachment-icon {
        font-size: 16px;
        color: #666;
    }

    .attachment-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 2px;
    }

    .file-size {
        font-size: 11px;
        color: #9fadbc;
    }

    .attachment-actions {
        display: flex;
        gap: 4px;
    }

    .action-btn {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        padding: 4px;
        border-radius: 3px;
    }

        .action-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

    .no-results {
        text-align: center;
        color: #9fadbc;
        font-size: 14px;
        padding: 12px;
    }

    .task-users-section {
        margin-bottom: 12px;
    }

    .task-users-label {
        font-size: 12px;
        font-weight: 600;
        color: #9fadbc;
        margin-bottom: 8px;
    }

    .task-users-avatars {
        display: flex;
        gap: 6px;
        flex-wrap: wrap;
        margin-bottom: 8px;
    }

    .task-user-avatar {
        width: 28px;
        height: 28px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 11px;
        cursor: pointer;
        position: relative;
        transition: transform 0.2s;
    }

        .task-user-avatar:hover {
            transform: scale(1.1);
        }

            .task-user-avatar:hover::after {
                content: '×';
                position: absolute;
                top: -4px;
                right: -4px;
                background: #dc3545;
                color: white;
                border-radius: 50%;
                width: 14px;
                height: 14px;
                font-size: 9px;
                display: flex;
                align-items: center;
                justify-content: center;
                line-height: 1;
            }

    .no-users-message {
        font-size: 12px;
        color: #9fadbc;
        font-style: italic;
        margin-bottom: 8px;
    }

    .attachments-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .attachment-item {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        padding: 12px;
        background-color: #1a1d23;
        border-radius: 6px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: background-color 0.2s;
        flex-wrap: wrap;
        min-height: 60px;
    }

        .attachment-item:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

    .attachment-icon-large {
        font-size: 20px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        background-color: rgba(255, 255, 255, 0.1);
        flex-shrink: 0;
        margin-top: 2px;
    }

    .attachment-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 4px;
        min-width: 0;
    }

    .attachment-name {
        font-size: 14px;
        color: #e9ecef;
        font-weight: 500;
        word-break: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        line-height: 1.4;
    }

    .attachment-meta {
        display: flex;
        gap: 12px;
        font-size: 12px;
        color: #9fadbc;
        flex-wrap: wrap;
    }

    .attachment-actions-modal {
        display: flex;
        gap: 6px;
        flex-shrink: 0;
        margin-top: 4px;
    }

    .action-btn-modal {
        background: rgba(255, 255, 255, 0.1);
        border: none;
        color: #9fadbc;
        cursor: pointer;
        padding: 6px 10px;
        border-radius: 4px;
        font-size: 12px;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 4px;
        white-space: nowrap;
        flex-shrink: 0;
    }

        .action-btn-modal:hover {
            background: rgba(255, 255, 255, 0.2);
            color: #e9ecef;
        }

    .no-attachments-message {
        text-align: center;
        color: #9fadbc;
        font-size: 14px;
        padding: 20px;
        font-style: italic;
    }

    .bi-file-image {
        color: #28a745;
    }

    .bi-file-pdf {
        color: #dc3545;
    }

    .bi-file-word {
        color: #007bff;
    }

    .bi-file-excel {
        color: #28a745;
    }

    .bi-file-text {
        color: #6c757d;
    }

    .bi-file-earmark {
        color: #6c757d;
    }

    .left-controls {
        display: flex;
        align-items: center;
    }

    .btn-add-task {
        background-color: #0079bf;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 10px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
    }

    .btn-add-task:hover {
        background-color: #026aa7;
    }

    .btn-add-task:active {
        background-color: #055a8c;
    }

    /* Quick Add Form Styles */
    .quick-add-form {
        background-color: #1a1d23;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
        border: 2px dashed #444;
        transition: border-color 0.2s;
    }

    .quick-add-form.active {
        border-color: #0079bf;
    }

    .quick-add-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
    }

    .quick-add-title {
        font-size: 16px;
        font-weight: 600;
        color: #e9ecef;
        margin: 0;
    }

    .quick-add-close {
        background: none;
        border: none;
        color: #9fadbc;
        cursor: pointer;
        font-size: 18px;
        padding: 4px;
        border-radius: 3px;
        transition: background-color 0.2s;
    }

    .quick-add-close:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: #e9ecef;
    }

    .quick-add-fields {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 12px;
        margin-bottom: 16px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .form-label {
        font-size: 12px;
        font-weight: 600;
        color: #9fadbc;
    }

    .form-input, .form-select, .form-textarea {
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 8px 12px;
        color: #e9ecef;
        font-size: 14px;
        font-family: inherit;
    }

    .form-input:focus, .form-select:focus, .form-textarea:focus {
        outline: 2px solid #0079bf;
        border-color: #0079bf;
    }

    .form-textarea {
        resize: vertical;
        min-height: 80px;
    }

    .form-full-width {
        grid-column: 1 / -1;
    }

    .quick-add-actions {
        display: flex;
        justify-content: flex-end;
        gap: 8px;
    }

    .add-task-modal {
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-actions {
        padding: 16px 24px;
        border-top: 1px solid rgba(255,255,255,0.1);
        display: flex;
        justify-content: flex-end;
        gap: 8px;
        background-color: #2b2f36;
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
        position: sticky;
        bottom: 0;
    }

    .assignee-selection select[multiple] {
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 8px;
        color: #e9ecef;
        font-size: 14px;
        width: 100%;
    }

        .assignee-selection select[multiple] option {
            padding: 8px 12px;
            margin: 2px 0;
            border-radius: 3px;
            cursor: pointer;
        }

            .assignee-selection select[multiple] option:hover {
                background-color: rgba(0, 121, 191, 0.2);
            }

            .assignee-selection select[multiple] option:checked {
                background-color: #0079bf;
                color: white;
            }

    /* Delete Project Modal Styles */
    .delete-project-modal {
        background-color: #2b2f36;
        border-radius: 8px;
        width: 400px;
        max-width: 90vw;
        margin: 0 auto;
        position: relative;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
        z-index: 10001;
        overflow: hidden;
    }

    .delete-project-modal-header {
        padding: 16px 20px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .delete-project-modal-title {
        font-size: 18px;
        font-weight: 600;
        color: #e9ecef;
        margin: 0;
    }

    .delete-project-modal-close-btn {
        background: transparent;
        border: none;
        color: #9fadbc;
        font-size: 20px;
        cursor: pointer;
        padding: 4px;
        border-radius: 3px;
        transition: background-color 0.2s;
    }

        .delete-project-modal-close-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

    .delete-project-modal-body {
        padding: 20px;
        text-align: center;
    }

    .delete-project-warning {
        background-color: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 6px;
        padding: 16px;
        margin-bottom: 20px;
    }

    .delete-project-warning-icon {
        font-size: 24px;
        color: #dc3545;
        margin-bottom: 8px;
    }

    .delete-project-warning-title {
        font-size: 16px;
        font-weight: 600;
        color: #e9ecef;
        margin-bottom: 8px;
    }

    .delete-project-warning-text {
        font-size: 14px;
        color: #9fadbc;
        line-height: 1.4;
    }

    .delete-project-confirmation {
        margin-bottom: 20px;
    }

    .delete-project-confirmation-text {
        font-size: 14px;
        color: #e9ecef;
        margin-bottom: 12px;
    }

    .delete-project-input {
        width: 100%;
        background-color: #1a1d23;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 12px;
        color: #e9ecef;
        font-size: 14px;
        margin-bottom: 16px;
        box-sizing: border-box;
    }

        .delete-project-input:focus {
            outline: 2px solid #dc3545;
            border-color: #dc3545;
        }

    .delete-project-modal-footer {
        padding: 16px 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: flex-end;
        gap: 8px;
    }

    .delete-project-btn {
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .delete-project-btn:hover:not(:disabled) {
            background-color: #c82333;
        }

        .delete-project-btn:disabled {
            background-color: #5e6c84;
            cursor: not-allowed;
        }

    .delete-project-cancel-btn {
        background-color: transparent;
        color: #9fadbc;
        border: 1px solid #5e6c84;
        border-radius: 4px;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .delete-project-cancel-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

    .sidebar-btn[style*="background-color: #0079bf"] {
        transition: background-color 0.2s;
    }

        .sidebar-btn[style*="background-color: #0079bf"]:hover {
            background-color: #026aa7 !important;
        }

    .sidebar-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    #addTaskDescription.description-box {
        background-color: #1a1d23;
        border: none;
        border-radius: 3px;
        padding: 8px 12px;
        color: #e9ecef;
        font-size: 14px;
        line-height: 20px;
        width: 100%;
        font-family: inherit;
        resize: vertical;
        transition: background-color 0.2s;
    }

        #addTaskDescription.description-box:hover {
            background-color: #101204;
        }

        #addTaskDescription.description-box:focus {
            outline: 2px solid #0079bf;
            background-color: #1a1d23;
            cursor: text;
        }

        #addTaskDescription.description-box.empty {
            color: #718096;
        }

    .bi-flag-fill[style*="color: #dc3545"] {
        color: #dc3545 !important;
    }

    .bi-flag-fill[style*="color: #ffc107"] {
        color: #ffc107 !important;
    }

    .bi-flag-fill[style*="color: #28a745"] {
        color: #28a745 !important;
    }

    .priority-btn.active {
        background-color: rgba(0, 121, 191, 0.3) !important;
        border: 1px solid #0079bf !important;
    }

    .priority-btn[data-priority="High"].active {
        background-color: rgba(220, 53, 69, 0.2) !important;
        border: 1px solid #dc3545 !important;
    }

    .priority-btn[data-priority="Medium"].active {
        background-color: rgba(255, 193, 7, 0.2) !important;
        border: 1px solid #ffc107 !important;
    }

    .priority-btn[data-priority="Low"].active {
        background-color: rgba(40, 167, 69, 0.2) !important;
        border: 1px solid #28a745 !important;
    }

    .priority-btn {
        border: 1px solid transparent !important;
        transition: all 0.2s ease;
    }

    .status-option:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .status-option.selected {
        background-color: rgba(0, 121, 191, 0.3);
        border-left: 3px solid #0079bf;
    }

    .user-item.selected {
        background-color: rgba(0, 121, 191, 0.3);
        border: 1px solid #0079bf;
    }

    .sidebar-btn:disabled {
        opacity: 0.6 !important;
        cursor: not-allowed !important;
        background-color: rgba(255, 255, 255, 0.05) !important;
    }

        .sidebar-btn:disabled:hover {
            background-color: rgba(255, 255, 255, 0.05) !important;
        }

    #taskModal .priority-btn.active {
        background-color: rgba(0, 121, 191, 0.3) !important;
        border: 1px solid #0079bf !important;
    }

    #taskModal .priority-btn[data-priority="High"].active {
        background-color: rgba(220, 53, 69, 0.2) !important;
        border: 1px solid #dc3545 !important;
    }

    #taskModal .priority-btn[data-priority="Medium"].active {
        background-color: rgba(255, 193, 7, 0.2) !important;
        border: 1px solid #ffc107 !important;
    }

    #taskModal .priority-btn[data-priority="Low"].active {
        background-color: rgba(40, 167, 69, 0.2) !important;
        border: 1px solid #28a745 !important;
    }

    .custom-date-input {
        position: relative;
        display: inline-block;
        min-width: 140px;
    }

    .date-text-input {
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 40px 10px 12px;
        color: #e9ecef;
        width: 100%;
        box-sizing: border-box;
        font-size: 14px;
        height: 40px;
        cursor: pointer;
        font-family: inherit;
    }

        .date-text-input:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

    .calendar-icon {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #e9ecef;
        font-size: 16px;
        pointer-events: none;
    }

    /* Date picker modal */
    .date-picker-modal {
        background-color: #2b2f36;
        border-radius: 8px;
        padding: 16px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
        width: 300px;
        position: absolute;
        z-index: 10003;
        display: none;
    }

    .date-picker-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
    }

    .date-picker-nav {
        background: none;
        border: none;
        color: #e9ecef;
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 3px;
    }

        .date-picker-nav:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

    .date-picker-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 4px;
    }

    .date-picker-day {
        padding: 8px;
        text-align: center;
        border-radius: 3px;
        cursor: pointer;
        font-size: 12px;
        color: #9fadbc;
    }

    .date-picker-date {
        padding: 8px;
        text-align: center;
        border-radius: 3px;
        cursor: pointer;
        transition: background-color 0.2s;
        color: #e9ecef;
    }

        .date-picker-date:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .date-picker-date.today {
            background-color: rgba(0, 121, 191, 0.3);
            border: 1px solid #0079bf;
        }

        .date-picker-date.selected {
            background-color: #0079bf;
            color: white;
        }

        .date-picker-date.other-month {
            color: #666;
        }

        .date-picker-date.disabled {
            opacity: 0.4;
            cursor: not-allowed !important;
            background-color: transparent !important;
            color: #666 !important;
        }

            .date-picker-date.disabled:hover {
                background-color: transparent !important;
            }

    .date-input-wrapper {
        position: relative;
        display: inline-block;
        min-width: 140px;
    }

    .date-text-input {
        background-color: #101204;
        border: 1px solid #444;
        border-radius: 4px;
        padding: 10px 60px 10px 12px;
        color: #e9ecef;
        width: 100%;
        box-sizing: border-box;
        font-size: 14px;
        height: 40px;
        cursor: pointer;
        font-family: inherit;
    }

        .date-text-input:focus {
            outline: 2px solid #0079bf;
            border-color: #0079bf;
        }

    .date-clear-btn {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #9fadbc;
        cursor: pointer;
        padding: 4px;
        border-radius: 3px;
        font-size: 16px;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s;
        opacity: 0;
        pointer-events: none;
    }

        .date-clear-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

        .date-clear-btn.visible {
            opacity: 1;
            pointer-events: auto;
        }

    .date-input-wrapper:has(.date-text-input:not(:placeholder-shown)) .date-clear-btn {
        opacity: 1;
        pointer-events: auto;
    }

    .date-text-input:not(:placeholder-shown) + .calendar-icon + .date-clear-btn {
        opacity: 1;
        pointer-events: auto;
    }

    .date-picker-footer {
        padding: 12px 16px 8px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        margin-top: 8px;
        display: flex;
        justify-content: center;
    }

    .date-picker-clear-btn {
        background: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 4px;
        color: #dc3545;
        padding: 6px 12px;
        font-size: 12px;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 4px;
    }

        .date-picker-clear-btn:hover {
            background: rgba(220, 53, 69, 0.2);
            border-color: rgba(220, 53, 69, 0.5);
        }

    /* Adjust the date picker modal to account for footer */
    .date-picker-modal {
        background-color: #2b2f36;
        border-radius: 8px;
        padding: 16px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
        width: 300px;
        position: absolute;
        z-index: 10003;
        display: none;
    }

    /* Comments Section Layout */
    .modal-body {
        display: flex;
        padding: 12px 16px 16px 36px;
        gap: 16px;
        position: relative;
    }

    .modal-main {
        flex: 1;
        min-width: 0;
        display: flex;
        flex-direction: column;
    }

    .modal-sidebar {
        width: 168px;
        flex-shrink: 0;
        padding: 0 8px 8px 24px;
    }

    /* Comments Section moved to sidebar area */
    .comments-sidebar {
        width: 300px;
        flex-shrink: 0;
        background-color: #1a1d23;
        border-radius: 8px;
        padding: 16px;
        margin-left: 16px;
        display: flex;
        flex-direction: column;
        height: fit-content;
        max-height: 600px;
    }

    .comments-sidebar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        padding-bottom: 8px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .comments-sidebar-title {
        font-size: 16px;
        font-weight: 600;
        color: #e9ecef;
        margin: 0;
    }

    .comments-list-container {
        flex: 1;
        overflow-y: auto;
        margin-bottom: 16px;
        max-height: 400px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 6px;
        padding: 8px;
    }

    /* Scrollbar styling for comments */
    .comments-list-container::-webkit-scrollbar {
        width: 6px;
    }

    .comments-list-container::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }

    .comments-list-container::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.3);
        border-radius: 3px;
    }

    .comments-list-container::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.5);
    }

    .comments-input-container {
        flex-shrink: 0;
        margin-top: auto;
    }

    /* Delete Comment Modal specific styles */
    .delete-comment-modal {
        background-color: #2b2f36;
        border-radius: 8px;
        width: 400px;
        max-width: 90vw;
        margin: 0 auto;
        position: relative;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
        z-index: 10001;
        overflow: hidden;
    }

    .delete-comment-modal-header {
        padding: 16px 20px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .delete-comment-modal-title {
        font-size: 18px;
        font-weight: 600;
        color: #e9ecef;
        margin: 0;
    }

    .delete-comment-modal-close-btn {
        background: transparent;
        border: none;
        color: #9fadbc;
        font-size: 20px;
        cursor: pointer;
        padding: 4px;
        border-radius: 3px;
        transition: background-color 0.2s;
    }

        .delete-comment-modal-close-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #e9ecef;
        }

    .delete-comment-modal-body {
        padding: 20px;
        text-align: center;
    }

    .delete-comment-warning {
        background-color: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 6px;
        padding: 16px;
        margin-bottom: 20px;
    }

    .delete-comment-warning-icon {
        font-size: 24px;
        color: #dc3545;
        margin-bottom: 8px;
    }

    .delete-comment-warning-title {
        font-size: 16px;
        font-weight: 600;
        color: #e9ecef;
        margin-bottom: 8px;
    }

    .delete-comment-warning-text {
        font-size: 14px;
        color: #9fadbc;
        line-height: 1.4;
    }

    .delete-comment-confirmation {
        margin-bottom: 20px;
    }

    .delete-comment-confirmation-text {
        font-size: 14px;
        color: #e9ecef;
        margin-bottom: 12px;
    }

    .delete-comment-modal-footer {
        padding: 16px 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: flex-end;
        gap: 8px;
    }

    .delete-comment-btn {
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .delete-comment-btn:hover:not(:disabled) {
            background-color: #c82333;
        }

        .delete-comment-btn:disabled {
            background-color: #5e6c84;
            cursor: not-allowed;
        }

    .delete-comment-cancel-btn {
        background-color: transparent;
        color: #9fadbc;
        border: 1px solid #5e6c84;
        border-radius: 4px;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .delete-comment-cancel-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .table-view-container {
            margin: 12px;
            height: calc(100vh - 100px);
        }
    
        .tasks-table th,
        .tasks-table td {
            padding: 10px 12px;
        }

    .modal-body {
        flex-wrap: wrap;
    }
    
    .comments-sidebar {
        width: 100%;
        max-width: none;
        margin-left: 0;
        margin-top: 16px;
        order: 3;
    }
        /* Comment Actions */
        .comment-actions {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }

        .comment-action-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: #9fadbc;
            cursor: pointer;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 4px;
        }

            .comment-action-btn:hover {
                background: rgba(255, 255, 255, 0.2);
                color: #e9ecef;
            }

            .comment-action-btn.delete {
                background: rgba(220, 53, 69, 0.1);
                color: #dc3545;
            }

                .comment-action-btn.delete:hover {
                    background: rgba(220, 53, 69, 0.2);
                }
        /* Comment Input Enhancements */
        .comment-input {
            width: 100%;
            background-color: #1a1d23;
            border: 1px solid #444;
            border-radius: 4px;
            padding: 12px;
            color: #e9ecef;
            font-size: 14px;
            resize: vertical;
            min-height: 80px;
            margin-bottom: 12px;
            font-family: inherit;
            transition: border-color 0.2s;
        }

            .comment-input:focus {
                outline: 2px solid #0079bf;
                border-color: #0079bf;
            }

            .comment-input::placeholder {
                color: #9fadbc;
            }
        /* Comment Item Enhancements */
        .comment-item {
            background-color: #1a1d23;
            border-radius: 6px;
            padding: 12px;
            margin-bottom: 8px;
            border-left: 3px solid #0079bf;
            transition: background-color 0.2s;
        }

            .comment-item:hover {
                background-color: rgba(255, 255, 255, 0.05);
            }

        .comment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .comment-author {
            font-weight: 600;
            color: #e9ecef;
            font-size: 14px;
        }

        .comment-date {
            color: #9fadbc;
            font-size: 11px;
        }

        .comment-text {
            color: #e9ecef;
            font-size: 14px;
            line-height: 1.4;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

    @@media (max-width: 992px) {
        .modal-body {
            flex-direction: column;
        }
    
        .modal-sidebar {
            width: 100%;
            margin-top: 20px;
            padding-left: 0;
        }
    
        .task-modal {
            width: 90%;
            margin: 20px auto;
        }
    
        .dates-grid {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 768px) {
        .pagination {
            padding: 12px 8px;
            gap: 6px;
            margin-top: 12px;
        }
    
        .pagination-btn {
            min-width: 80px;
            padding: 8px 12px;
            font-size: 13px;
            height: 36px;
        }
    
        .pagination-info {
            font-size: 13px;
            margin: 0 8px;
            order: -1;
            width: 100%;
            text-align: center;
        }
    
        .filter-controls {
            gap: 8px;
        }
    
        .filter-select, .search-box, .date-input {
            min-width: 120px;
            padding: 8px 10px;
            font-size: 13px;
            height: 36px;
        }
    
        .search-box {
            min-width: 150px;
            max-width: 100%;
        }
    
        .date-filter {
            width: 100%;
            justify-content: space-between;
        }
    
        .date-filter span {
            font-size: 13px;
        }
    
        .table-controls {
            gap: 12px;
        }
    
        .left-controls {
            width: 100%;
        }
    
        .btn-add-task {
            width: 100%;
            height: 40px;
        }

        .modal-body {
            padding: 12px 8px 16px 16px;
        }

        .comments-sidebar {
            padding: 12px;
        }

        .comments-list-container {
            max-height: 300px;
        }

        .modal-overlay {
            padding: 10px 4px;
            align-items: flex-start;
        }

        .task-modal {
            max-width: calc(100vw - 8px);
            max-height: calc(100vh - 20px);
        }

        .modal-header {
            padding: 12px 16px 8px 16px;
        }

        .modal-body {
            padding: 8px 12px 12px 12px;
            gap: 12px;
        }

        .modal-title {
            font-size: 18px;
        }

        .modal-subtitle {
            font-size: 13px;
        }
    }

    @@media (max-height: 600px) {
        .table-view-container {
            height: calc(100vh - 100px);
        }
    
        .tasks-table-container {
            max-height: calc(100vh - 200px);
        }
    
        .pagination {
            padding: 8px;
            margin-top: 8px;
        }

        .modal-overlay {
            align-items: flex-start;
            padding-top: 10px;
        }

        .task-modal {
            max-height: calc(100vh - 20px);
        }

        .modal-body {
            max-height: calc(100vh - 150px);
        }
    }

    @@media (max-width: 576px) {
        .pagination {
            flex-direction: column;
            gap: 8px;
            min-height: 80px;
        }
    
        .pagination-info {
            order: 0;
            margin: 0;
        }
    
        .pagination-btn {
            min-width: 120px;
            width: 100%;
            max-width: 200px;
        }
    
        .filter-controls {
            flex-direction: column;
            width: 100%;
        }
    
        .filter-select, .search-box, .date-input {
            width: 100%;
            min-width: unset;
            max-width: 100%;
        }
    
        .date-filter {
            width: 100%;
        }
    
        .date-input {
            flex: 1;
        }
    
        .table-view-container {
            padding: 8px;
            margin: 4px;
        }
    
        .tasks-table-container {
            margin-bottom: 8px;
        }
    }

    @@media (hover: none) and (pointer: coarse) {
        .tasks-table tbody tr {
            min-height: 44px;
        }
    
        .sidebar-btn,
        .pagination-btn,
        .btn-add-task {
            min-height: 44px;
        }
    
        .modal-close-btn,
        .more-btn {
            min-width: 44px;
            min-height: 44px;
        }
    
        .tasks-table th,
        .tasks-table td {
            padding: 12px 8px;
        }
    }

    @@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
        .priority-badge,
        .status-badge {
            font-weight: 600;
        }
    }

    @@media (max-width: 768px) and (orientation: landscape) {
        .table-view-container {
            height: calc(100vh - 100px);
        }
    
        .navbar {
            padding: 6px 12px;
        }
    
        .tasks-table th,
        .tasks-table td {
            padding: 6px 8px;
        }
    }

    @@media (max-width: 480px) {
        .modal-header {
            padding: 8px 12px 6px 12px;
        }
    
        .modal-header-icon {
            left: 8px;
            top: 8px;
            font-size: 16px;
        }
    
        .modal-title {
            font-size: 16px;
            padding: 6px 8px;
        }
    
        .modal-close-btn {
            right: 4px;
            top: 4px;
            width: 28px;
            height: 28px;
        }
    
        .modal-body {
            padding: 6px 8px 8px 8px;
            gap: 8px;
        }
    
        .comments-sidebar {
            padding: 12px;
        }
    
        .comments-list-container {
            max-height: 200px;
        }
    }

    /* Very small screens */
    @@media (max-width: 360px) {
        .navbar {
            padding: 4px 6px;
        }
    
        .project-name {
            font-size: 14px;
        }
    
        .user-avatar {
            width: 28px;
            height: 28px;
            font-size: 12px;
        }
    
        .table-view-container {
            margin: 2px;
            padding: 6px;
        }
    
        .priority-badge,
        .status-badge {
            font-size: 10px;
            padding: 2px 4px;
        }
    }
</style>

<!-- Navbar -->
<div class="navbar">
    <div class="navbar-left">
        <h1 class="project-name" id="projectNameDisplay" onclick="enableProjectNameEdit()">
            @(Model?.project.Name ?? "Project Board")
        </h1>
        <input type="text" id="projectNameInput"
               class="project-name-input"
               value="@(Model?.project.Name ?? "Project Board")"
               onblur="saveProjectName()"
               onkeydown="handleEnter(event)"
               style="display:none;" />
    </div>

    <div class="navbar-right">
        @if (Model?.project.projectUsers != null)
        {
            int colorIndex = 1;
            foreach (var user in Model.project.projectUsers)
            {
                var initials = string.IsNullOrEmpty(user.UserName) ? "?" :
                (user.UserName.Length >= 2 ? user.UserName.Substring(0, 2).ToUpper() : user.UserName.ToUpper());
                var colorClass = $"avatar-color-{colorIndex}";
                colorIndex = colorIndex >= 6 ? 1 : colorIndex + 1;

                <div class="user-avatar @colorClass"
                     title="@user.UserName"
                     data-user-id="@user.Id">
                    @initials
                </div>
            }
        }

        <div class="dropdown">
            <button class="more-btn" onclick="toggleDropdown('projectActionsDropdown')">
                <i class="bi bi-three-dots"></i>
            </button>
            <div id="projectActionsDropdown" class="dropdown-content">
                @if (Model?.users != null && Model.users.Count > 0)
                {
                    <a href="#" onclick="openAddMemberModal()">Manage Members</a>
                }
                else
                {
                    <a href="#" style="color: #9fadbc; cursor: not-allowed;" title="Only administrators can manage members">Manage Members</a>
                }
                <a href="#" onclick="openDeleteProjectModal()">Delete Project</a>
            </div>
        </div>
    </div>
</div>

<!-- Project Management -->
<!-- Add Member to Project Modal -->
<div class="modal-overlay" id="addMemberModal" onclick="closeAddMemberModal()">
    <div class="add-member-modal" onclick="event.stopPropagation()">
        <div class="add-member-modal-header">
            <h3 class="add-member-modal-title">Manage Project Members</h3>
            <button class="add-member-modal-close-btn" onclick="closeAddMemberModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="add-member-modal-body">
            @if (Model?.users != null && Model.users.Count > 0)
            {
                <input type="text"
                       class="add-member-search"
                       id="addMemberSearch"
                       placeholder="Search users by name or email..."
                       onkeyup="filterAddMemberUsers()">

                <div class="add-member-users-list" id="addMemberUsersList">
                    <!-- All users will be populated here with checkboxes -->
                </div>
            }
            else
            {
                <div class="add-member-no-admin-message">
                    <i class="bi bi-shield-exclamation" style="font-size: 24px; margin-bottom: 8px;"></i>
                    <p>Only administrators can manage project members.</p>
                    <p style="font-size: 12px; margin-top: 8px;">Please contact an administrator to manage project members.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Project Confirmation Modal -->
<div class="modal-overlay" id="deleteProjectModal" onclick="closeDeleteProjectModal()">
    <div class="delete-project-modal" onclick="event.stopPropagation()">
        <div class="delete-project-modal-header">
            <h3 class="delete-project-modal-title">Delete Project</h3>
            <button class="delete-project-modal-close-btn" onclick="closeDeleteProjectModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="delete-project-modal-body">
            <div class="delete-project-warning">
                <div class="delete-project-warning-icon">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                </div>
                <div class="delete-project-warning-title">This action cannot be undone</div>
                <div class="delete-project-warning-text">
                    This will permanently delete the project, all tasks, attachments, and member associations.
                </div>
            </div>

            <div class="delete-project-confirmation">
                <div class="delete-project-confirmation-text">
                    Are you sure you want to delete the project <strong>"@Model?.project.Name"</strong>?
                </div>
            </div>
        </div>

        <div class="delete-project-modal-footer">
            <button class="delete-project-cancel-btn" onclick="closeDeleteProjectModal()">Cancel</button>
            <button class="delete-project-btn" id="deleteProjectConfirmBtn" onclick="deleteProject()">
                Delete Project
            </button>
        </div>
    </div>
</div>

<!-- Table Container -->
<div class="table-view-container">
    <div class="table-controls">
        <div class="left-controls">
            <button class="btn-add-task" onclick="openAddTaskModal()">
                <i class="bi bi-plus-lg"></i> Add New Task
            </button>
        </div>

        <div class="filter-controls">
            <select class="filter-select" id="memberFilter" onchange="applyFilters()">
                <option value="">All Members</option>
                @if (Model?.project?.projectUsers != null)
                {
                    foreach (var user in Model.project.projectUsers)
                    {
                        <option value="@user.Id">@user.UserName</option>
                    }
                }
            </select>

            <select class="filter-select" id="priorityFilter" onchange="applyFilters()">
                <option value="">All Priorities</option>
                <option value="3">High</option>
                <option value="2">Medium</option>
                <option value="1">Low</option>
            </select>

            <div class="date-filter">
                <div class="date-input-wrapper">
                    <input type="text" class="date-text-input" id="startDateFilter" placeholder="From date" readonly>
                    <i class="bi bi-calendar calendar-icon"></i>
                </div>
                <span style="color: #9fadbc;">to</span>
                <div class="date-input-wrapper">
                    <input type="text" class="date-text-input" id="endDateFilter" placeholder="To date" readonly>
                    <i class="bi bi-calendar calendar-icon"></i>
                </div>
            </div>

            <input type="text" class="search-box" id="taskSearch" placeholder="Search tasks..." onkeyup="applyFilters()">
        </div>
    </div>

    <!-- Tasks Table -->
    <div class="tasks-table-container">
        <table class="tasks-table">
            <thead>
                <tr>
                    <th onclick="sortTable('title')">Task Name</th>
                    <th onclick="sortTable('deadline')">Deadline</th>
                    <th onclick="sortTable('assignedBy')">Created By</th>
                    <th onclick="sortTable('assignedTo')">Assigned To</th>
                    <th onclick="sortTable('createdDate')">Created Date</th>
                    <th onclick="sortTable('priority')">Priority</th>
                    <th onclick="sortTable('status')">Status</th>
                    <th onclick="sortTable('comments')">Comments</th>
                </tr>
            </thead>
            <tbody id="tasksTableBody">
                <!-- Tasks will be populated here by JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="pagination">
        <button class="pagination-btn" id="prevPage" onclick="changePage(-1)">Previous</button>
        <span class="pagination-info" id="pageInfo">Page 1 of 1</span>
        <button class="pagination-btn" id="nextPage" onclick="changePage(1)">Next</button>
    </div>
</div>

<!-- Add Task Modal -->
<div class="modal-overlay" id="addTaskModal" onclick="closeAddTaskModal()">
    <div class="task-modal" onclick="event.stopPropagation()">
        <div class="modal-header">
            <div class="modal-header-icon">
                <i class="bi bi-plus-lg"></i>
            </div>
            <div class="modal-title-section">
                <input type="text" class="modal-title" id="addTaskTitle" placeholder="Enter task title" value="">
                <p class="modal-subtitle">Creating new task</p>
            </div>
            <button class="modal-close-btn" onclick="closeAddTaskModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="modal-body">
            <div class="modal-main">
                <div class="modal-section">
                    <div class="modal-section-header">
                        <h3 class="modal-section-title">Description</h3>
                    </div>
                    <textarea class="description-box empty" id="addTaskDescription"
                              placeholder="Add a detailed description..."
                              style="min-height: 200px;"></textarea>
                </div>

                <!-- Add Task Attachments Section -->
                <div class="modal-section" id="addTaskAttachmentsSection" style="display: none;">
                    <div class="modal-section-header">
                        <h3 class="modal-section-title">Attachments</h3>
                    </div>
                    <div id="addTaskAttachmentsList" class="attachments-container">
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="modal-sidebar">
                <p class="sidebar-section-title">Set Priority</p>

                <!-- Priority Buttons -->
                <button class="sidebar-btn priority-btn" data-priority="3" onclick="setAddTaskPriority('3', this)">
                    <i class="bi bi-flag-fill sidebar-icon" style="color: #dc3545;"></i>
                    <span>High Priority</span>
                </button>
                <button class="sidebar-btn priority-btn" data-priority="2" onclick="setAddTaskPriority('2', this)">
                    <i class="bi bi-flag-fill sidebar-icon" style="color: #ffc107;"></i>
                    <span>Medium Priority</span>
                </button>
                <button class="sidebar-btn priority-btn active" data-priority="1" onclick="setAddTaskPriority('1', this)">
                    <i class="bi bi-flag-fill sidebar-icon" style="color: #28a745;"></i>
                    <span>Low Priority</span>
                </button>

                <div class="sidebar-divider"></div>

                <p class="sidebar-section-title">Add to task</p>

                <!-- Member Button -->
                <button class="sidebar-btn members-btn" onclick="toggleAddTaskDropdown('addTaskMembersDropdown', this)">
                    <i class="bi bi-people sidebar-icon"></i>
                    <span>Members</span>
                </button>

                <!-- Attachment Button -->
                <button class="sidebar-btn" onclick="toggleAddTaskDropdown('addTaskAttachmentsDropdown', this)">
                    <i class="bi bi-paperclip sidebar-icon"></i>
                    <span>Attachment</span>
                </button>

                <!-- Due Date Input -->
                <div class="date-input-wrapper" style="margin-bottom: 8px;">
                    <input type="text" class="date-text-input" id="addTaskDueDate" placeholder="Due date" readonly>
                    <i class="bi bi-calendar calendar-icon"></i>
                </div>

                <!-- Status Button -->
                <button class="sidebar-btn status-btn" onclick="toggleAddTaskDropdown('addTaskStatusDropdown', this)">
                    <i class="bi bi-columns sidebar-icon"></i>
                    <span>Status</span>
                </button>

                <p class="sidebar-section-title" style="margin-top: 16px;">Actions</p>
                <button class="sidebar-btn create-btn" onclick="createTaskFromModal()" style="background-color: #0079bf; color: white;">
                    <i class="bi bi-check-lg sidebar-icon"></i>
                    <span>Create Task</span>
                </button>
                <button class="sidebar-btn cancel-btn" onclick="closeAddTaskModal()">
                    <i class="bi bi-x-lg sidebar-icon"></i>
                    <span>Cancel</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Members Dropdown -->
<div id="addTaskMembersDropdown" class="sidebar-dropdown">
    <div class="dropdown-header">
        <span>Members</span>
        <button class="dropdown-close-btn" onclick="closeAllAddTaskDropdowns()">
            <i class="bi bi-x-lg"></i>
        </button>
    </div>
    <input type="text" class="search-bar" id="addTaskMembersSearch" placeholder="Search members..." onkeyup="filterAddTaskMembers()">
    <div id="addTaskMembersList">
        <!-- Members will be populated here -->
    </div>
</div>

<!-- Status Dropdown -->
<div id="addTaskStatusDropdown" class="sidebar-dropdown">
    <div class="dropdown-header">
        <span>Status</span>
        <button class="dropdown-close-btn" onclick="closeAllAddTaskDropdowns()">
            <i class="bi bi-x-lg"></i>
        </button>
    </div>
    <div id="addTaskStatusList">
        @foreach (TaskManagement.Data.Migrations.Models.TaskStatus status in Enum.GetValues(typeof(TaskManagement.Data.Migrations.Models.TaskStatus)))
        {
            var member = typeof(TaskManagement.Data.Migrations.Models.TaskStatus).GetMember(status.ToString()).FirstOrDefault();
            var displayName = member?.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), false)
            .Cast<System.ComponentModel.DataAnnotations.DisplayAttribute>()
            .FirstOrDefault()?.Name ?? status.ToString();

            <div class="status-option" data-status="@((int)status)" onclick="setAddTaskStatus(@((int)status), this)">
                @displayName
            </div>
        }
    </div>
</div>

<!-- Add Task Attachments Dropdown -->
<div id="addTaskAttachmentsDropdown" class="sidebar-dropdown">
    <div class="dropdown-header">
        <span>Attachments</span>
        <button class="dropdown-close-btn" onclick="closeAllAddTaskDropdowns()">
            <i class="bi bi-x-lg"></i>
        </button>
    </div>
    <div class="file-upload-area" id="addTaskFileUploadArea" onclick="document.getElementById('addTaskFileInput').click()">
        <div class="upload-icon">
            <i class="bi bi-cloud-upload"></i>
        </div>
        <div>Click to upload or drag and drop multiple files</div>
        <input type="file" id="addTaskFileInput" style="display: none;" multiple onchange="handleAddTaskFileInputChange(this.files)">
    </div>
    <div id="addTaskAttachmentsDropdownList" class="dropdown-content" style="margin-top: 12px;">
    </div>
</div>

<!-- Edit Task Modal -->
<div class="modal-overlay" id="taskModal" onclick="handleModalOverlayClick(event)">
    <div class="task-modal" onclick="event.stopPropagation()">
        <div class="modal-header">
            <div class="modal-header-icon">
                <i class="bi bi-card-text"></i>
            </div>
            <div class="modal-title-section">
                <input type="text" class="modal-title" id="modalTitle" placeholder="Task title" readonly onclick="enableTitleEdit()">
                <p class="modal-subtitle" id="modalSubtitle">in list <strong>To Do</strong></p>
            </div>
            <button class="modal-close-btn" onclick="closeTaskModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="modal-body">
            <div class="modal-main">
                <!-- User Section -->
                <div class="task-users-section" id="taskUsersSection" style="display: none;">
                    <div class="task-users-label">Assigned To</div>
                    <div class="task-users-avatars" id="taskUsersAvatars">
                    </div>
                    <div class="no-users-message" id="noUsersMessage" style="display: none;">
                        No users assigned to this task
                    </div>
                </div>

                <!-- Description Section -->
                <div class="modal-section">
                    <div class="modal-section-header">
                        <h3 class="modal-section-title">Description</h3>
                    </div>
                    <textarea class="description-box empty" id="modalDescription"
                              placeholder="Add a more detailed description..."
                              readonly
                              onclick="enableDescriptionEdit()"></textarea>
                    <div class="edit-controls" id="descriptionControls">
                        <button class="btn-save" onclick="saveDescription()">Save</button>
                        <button class="btn-cancel" onclick="cancelDescriptionEdit()">
                            Cancel
                        </button>
                    </div>
                </div>

                <!-- Due Date Section -->
                <div class="modal-section">
                    <div class="modal-section-header">
                        <h3 class="modal-section-title">Due Date</h3>
                    </div>
                    <div class="dates-grid">
                        <div class="date-item">
                            <div class="date-input-wrapper">
                                <input type="text" class="date-text-input" id="dueDateDisplayInput" placeholder="No due date" readonly>
                                <i class="bi bi-calendar calendar-icon"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Attachments Section -->
                <div class="modal-section" id="attachmentsSection" style="display: none;">
                    <div class="modal-section-header">
                        <h3 class="modal-section-title">Attachments</h3>
                    </div>
                    <div id="modalAttachmentsList" class="attachments-container">
                    </div>
                </div>
            </div>

            <!-- Comments Section -->
            <div class="comments-sidebar" id="commentsSidebar">
                <div class="comments-sidebar-header">
                    <h3 class="comments-sidebar-title">Comments</h3>
                </div>
                <div class="comments-list-container" id="taskCommentsList">
                    <div class="no-comments">No comments yet. Be the first to comment!</div>
                </div>
                <div class="comments-input-container">
                    <textarea class="comment-input" id="taskCommentInput" placeholder="Add a comment..."></textarea>
                    <div class="comment-actions">
                        <button class="btn-save" onclick="addTaskComment()">Add Comment</button>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="modal-sidebar">
                <p class="sidebar-section-title">Set Priority</p>

                <!-- Priority Buttons -->
                <button class="sidebar-btn priority-btn" data-priority="3" onclick="setTaskPriority('3', this)">
                    <i class="bi bi-flag-fill sidebar-icon" style="color: #dc3545;"></i>
                    <span>High Priority</span>
                </button>
                <button class="sidebar-btn priority-btn" data-priority="2" onclick="setTaskPriority('2', this)">
                    <i class="bi bi-flag-fill sidebar-icon" style="color: #ffc107;"></i>
                    <span>Medium Priority</span>
                </button>
                <button class="sidebar-btn priority-btn" data-priority="1" onclick="setTaskPriority('1', this)">
                    <i class="bi bi-flag-fill sidebar-icon" style="color: #28a745;"></i>
                    <span>Low Priority</span>
                </button>

                <div class="sidebar-divider"></div>

                <p class="sidebar-section-title">Add to task</p>
                <button class="sidebar-btn" onclick="toggleSidebarDropdown('membersDropdown', this)">
                    <i class="bi bi-people sidebar-icon"></i>
                    <span>Members</span>
                </button>
                <button class="sidebar-btn" onclick="toggleSidebarDropdown('attachmentsDropdown', this)">
                    <i class="bi bi-paperclip sidebar-icon"></i>
                    <span>Attachment</span>
                </button>

                <p class="sidebar-section-title" style="margin-top: 16px;">Actions</p>
                <button class="sidebar-btn" onclick="toggleSidebarDropdown('moveDropdown', this)">
                    <i class="bi bi-arrow-right sidebar-icon"></i>
                    <span>Move</span>
                </button>
                <button class="sidebar-btn" onclick="toggleSidebarDropdown('removeDropdown', this)">
                    <i class="bi bi-trash-fill sidebar-icon"></i>
                    <span>Remove</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Sidebar Dropdowns -->
<!-- Member Management Dropdowns -->
<div id="membersDropdown" class="sidebar-dropdown">
    <div class="dropdown-header">
        <span>Members</span>
        <button class="dropdown-close-btn" onclick="closeAllDropdowns()">
            <i class="bi bi-x-lg"></i>
        </button>
    </div>
    <input type="text" class="search-bar" id="membersSearch" placeholder="Search members..." onkeyup="filterMembers()">
    <div id="membersList">
    </div>
</div>

<!-- Upload Attachments Dropdowns -->
<div id="attachmentsDropdown" class="sidebar-dropdown">
    <div class="dropdown-header">
        <span>Attachments</span>
        <button class="dropdown-close-btn" onclick="closeAllDropdowns()">
            <i class="bi bi-x-lg"></i>
        </button>
    </div>
    <div class="file-upload-area" id="fileUploadArea" onclick="document.getElementById('fileInput').click()">
        <div class="upload-icon">
            <i class="bi bi-cloud-upload"></i>
        </div>
        <div>Click to upload or drag and drop multiple files</div>
        <input type="file" id="fileInput" style="display: none;" multiple onchange="handleFileInputChange(this.files)">
    </div>
    <div id="attachmentsList" class="dropdown-content" style="margin-top: 12px;">
    </div>
</div>

<!-- Move Progress Status Dropdowns -->
<div id="moveDropdown" class="sidebar-dropdown">
    <div class="dropdown-header">
        <span>Move Task</span>
        <button class="dropdown-close-btn" onclick="closeAllDropdowns()">
            <i class="bi bi-x-lg"></i>
        </button>
    </div>
    <div id="statusList">
        @foreach (TaskManagement.Data.Migrations.Models.TaskStatus status in Enum.GetValues(typeof(TaskManagement.Data.Migrations.Models.TaskStatus)))
        {
            var member = typeof(TaskManagement.Data.Migrations.Models.TaskStatus).GetMember(status.ToString()).FirstOrDefault();
            var displayName = member?.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), false)
            .Cast<System.ComponentModel.DataAnnotations.DisplayAttribute>()
            .FirstOrDefault()?.Name ?? status.ToString();

            <div class="status-option" data-status="@((int)status)" onclick="selectStatus(@((int)status), this)">
                @displayName
            </div>
        }
    </div>
</div>

<!-- Remove Task Dropdowns -->
<div id="removeDropdown" class="sidebar-dropdown">
    <div class="dropdown-header">
        <span>Remove Task</span>
        <button class="dropdown-close-btn" onclick="closeAllDropdowns()">
            <i class="bi bi-x-lg"></i>
        </button>
    </div>
    <div class="confirmation-dialog">
        <p>Are you sure you want to remove this task?</p>
        <div class="confirmation-buttons">
            <button class="btn-danger" onclick="removeTask()">Remove</button>
            <button class="btn-secondary" onclick="closeAllDropdowns()">Cancel</button>
        </div>
    </div>
</div>

<!-- Comments Modal -->
<div class="modal-overlay" id="commentsModal" onclick="closeCommentsModal()">
    <div class="task-modal comments-modal" onclick="event.stopPropagation()">
        <div class="modal-header">
            <div class="modal-header-icon">
                <i class="bi bi-chat-left-text"></i>
            </div>
            <div class="modal-title-section">
                <h3 class="modal-title" id="commentsTaskTitle">Task Comments</h3>
                <p class="modal-subtitle" id="commentsTaskSubtitle"></p>
            </div>
            <button class="modal-close-btn" onclick="closeCommentsModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="modal-body">
            <div class="modal-main">
                <div class="comments-section">
                    <div class="comments-list" id="commentsList">
                        <div class="no-comments">Loading comments...</div>
                    </div>

                    <textarea class="comment-input" id="commentInput"
                              placeholder="Add a comment..."></textarea>

                    <div class="comment-actions">
                        <button class="btn-cancel" onclick="closeCommentsModal()">Cancel</button>
                        <button class="btn-save" onclick="addComment()">Add Comment</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Comment Confirmation Modal -->
<div class="modal-overlay" id="deleteCommentModal" onclick="closeDeleteCommentModal()">
    <div class="delete-comment-modal" onclick="event.stopPropagation()">
        <div class="delete-comment-modal-header">
            <h3 class="delete-comment-modal-title">Delete Comment</h3>
            <button class="delete-comment-modal-close-btn" onclick="closeDeleteCommentModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="delete-comment-modal-body">
            <div class="delete-comment-warning">
                <div class="delete-comment-warning-icon">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                </div>
                <div class="delete-comment-warning-title">This action cannot be undone</div>
                <div class="delete-comment-warning-text">
                    This will permanently delete the comment and remove it from the task.
                </div>
            </div>

            <div class="delete-comment-confirmation">
                <div class="delete-comment-confirmation-text">
                    Are you sure you want to delete this comment?
                </div>
            </div>
        </div>

        <div class="delete-comment-modal-footer">
            <button class="delete-comment-cancel-btn" onclick="closeDeleteCommentModal()">Cancel</button>
            <button class="delete-comment-btn" id="deleteCommentConfirmBtn" onclick="confirmDeleteComment()">
                Delete Comment
            </button>
        </div>
    </div>
</div>

<script>
    // Global variables
    let currentTask = null;
    const currentUserId = '@Model.currentUserId';
    let tasksData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.project.projectTasks ?? new List<ProjectTaskReturnModel>()));
    let usersData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.project.projectUsers ?? new List<ProjectUserReturnModel>()));
    const currentProjectId = '@Model.project.Id';
    let currentAddTaskPriority = '1';

    const statusNames = {};
    @foreach (TaskManagement.Data.Migrations.Models.TaskStatus status in Enum.GetValues(typeof(TaskManagement.Data.Migrations.Models.TaskStatus)))
    {
        var member = typeof(TaskManagement.Data.Migrations.Models.TaskStatus).GetMember(status.ToString()).FirstOrDefault();
        var displayName = member?.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), false)
        .Cast<System.ComponentModel.DataAnnotations.DisplayAttribute>()
        .FirstOrDefault()?.Name ?? status.ToString();
        <text>statusNames[@((int)status)] = "@displayName";</text>
    }

    // Table View State Management
    let currentSort = { field: 'createdDate', direction: 'desc' };
    let currentFilters = {
        member: '',
        priority: '',
        startDate: '',
        endDate: '',
        search: ''
    };
    let currentPage = 1;
    const pageSize = 10;
    let filteredTasks = [];
    let currentTaskForComments = null;

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function () {
        initializeTableView();
    });

    // ========== TABLE VIEW ==========

    function initializeTableView() {
        filteredTasks = [...tasksData];
        applySorting();
        applyFilters();
        renderTable();
        updatePagination();
        updateSortIndicators();
    }

    // Sorting
    function sortTable(field) {
        if (currentSort.field === field) {
            currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
        } else {
            currentSort.field = field;
            currentSort.direction = 'asc';
        }

        applySorting();
        renderTable();
        updateSortIndicators();
    }

    function applySorting() {
        filteredTasks.sort((a, b) => {
            let aValue = getSortValue(a, currentSort.field);
            let bValue = getSortValue(b, currentSort.field);

            if (aValue == null) aValue = '';
            if (bValue == null) bValue = '';

            if (currentSort.direction === 'asc') {
                return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
            } else {
                return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
            }
        });
    }

    function getSortValue(task, field) {
        switch (field) {
            case 'title':
                return task.Title?.toLowerCase() || '';
            case 'deadline':
                return task.DueDate ? new Date(task.DueDate) : new Date(0);
            case 'assignedBy':
                if (task.CreatedBy === currentUserId) {
                    return 'you';
                }
                return (task.AssignedByUserName || 'project owner').toLowerCase();
            case 'assignedTo':
                return getAssignedTo(task)?.toLowerCase() || '';
            case 'createdDate':
                return task.CreatedDateTime ? new Date(task.CreatedDateTime) : new Date(0);
            case 'priority':
                return parseInt(task.PriorityStatus) || 1;
            case 'status':
                return statusNames[task.ProgressStatus] || '';
            case 'comments':
                return getCommentsCount(task);
            default:
                return '';
        }
    }

    function updateSortIndicators() {
        document.querySelectorAll('.tasks-table th').forEach(th => {
            th.classList.remove('sort-asc', 'sort-desc');
        });

        const header = Array.from(document.querySelectorAll('.tasks-table th')).find(
            th => th.textContent.trim().includes(getHeaderText(currentSort.field))
        );

        if (header) {
            header.classList.add(currentSort.direction === 'asc' ? 'sort-asc' : 'sort-desc');
        }
    }

    function getHeaderText(field) {
        const headers = {
            'title': 'Task Name',
            'deadline': 'Deadline',
            'assignedBy': 'Assigned By',
            'assignedTo': 'Assigned To',
            'createdDate': 'Created Date',
            'priority': 'Priority',
            'status': 'Status',
            'comments': 'Comments'
        };
        return headers[field] || '';
    }

    // Filtering
    function applyFilters() {
        currentFilters = {
            member: document.getElementById('memberFilter').value,
            priority: document.getElementById('priorityFilter').value,
            startDate: document.getElementById('startDateFilter').value,
            endDate: document.getElementById('endDateFilter').value,
            search: document.getElementById('taskSearch').value.toLowerCase()
        };

        filteredTasks = tasksData.filter(task => {
            return filterByMember(task) &&
                filterByPriority(task) &&
                filterByDateRange(task) &&
                filterBySearch(task);
        });

        applySorting();
        currentPage = 1;
        renderTable();
        updatePagination();
    }

    function filterByMember(task) {
        if (!currentFilters.member) return true;

        const taskUsers = task.taskUsers || [];
        return taskUsers.some(user => user.Id === currentFilters.member);
    }

    function filterByPriority(task) {
        if (!currentFilters.priority) return true;

        const taskPriority = String(task.PriorityStatus || '1');
        const filterPriority = String(currentFilters.priority);

        return taskPriority === filterPriority;
    }

    function filterByDateRange(task) {
        if (!currentFilters.startDate && !currentFilters.endDate) return true;
        if (!task.DueDate) return false;

        const taskDate = new Date(task.DueDate).setHours(0, 0, 0, 0);
        const startDate = currentFilters.startDate ? new Date(currentFilters.startDate).setHours(0, 0, 0, 0) : null;
        const endDate = currentFilters.endDate ? new Date(currentFilters.endDate).setHours(23, 59, 59, 999) : null;

        if (startDate && endDate) {
            return taskDate >= startDate && taskDate <= endDate;
        } else if (startDate) {
            return taskDate >= startDate;
        } else if (endDate) {
            return taskDate <= endDate;
        }

        return true;
    }

    function filterBySearch(task) {
        if (!currentFilters.search) return true;

        const searchTerm = currentFilters.search;
        return task.Title?.toLowerCase().includes(searchTerm) ||
            task.Description?.toLowerCase().includes(searchTerm) ||
            getAssignedTo(task).toLowerCase().includes(searchTerm);
    }

    // Table Rendering
    function renderTable() {
        const tbody = document.getElementById('tasksTableBody');
        const startIndex = (currentPage - 1) * pageSize;
        const paginatedTasks = filteredTasks.slice(startIndex, startIndex + pageSize);

        tbody.innerHTML = '';

        if (paginatedTasks.length === 0) {
            tbody.innerHTML = `
                    <tr>
                        <td colspan="8" style="text-align: center; color: #9fadbc; padding: 40px;">
                            No tasks found matching your filters.
                        </td>
                    </tr>
                `;
            return;
        }

        paginatedTasks.forEach(task => {
            const row = createTableRow(task);
            tbody.appendChild(row);
        });
    }

    function createTableRow(task) {
        const row = document.createElement('tr');
        row.onclick = () => openTaskModal(task.Id);

        // Check if current user is the task creator
        const isTaskCreator = task.CreatedBy === currentUserId;

        row.innerHTML = `
            <td>
                <div style="font-weight: 500; margin-bottom: 4px;">${task.Title || 'Untitled Task'}</div>
                ${task.Description ? `<div style="font-size: 12px; color: #9fadbc;">${task.Description}</div>` : ''}
                ${isTaskCreator ? '<div style="font-size: 10px; color: #0079bf;">(Created by you)</div>' : ''}
            </td>
            <td>${formatDueDate(task.DueDate)}</td>
            <td>${getAssignedBy(task)}</td> <!-- This now returns HTML -->
            <td>
                <div class="users-container">
                    ${createAssignedToCells(task)}
                </div>
            </td>
            <td>${formatDate(task.CreatedDateTime)}</td>
            <td>${createPriorityBadge(task.PriorityStatus)}</td>
            <td>${createStatusBadge(task.ProgressStatus)}</td>
            <td class="comments-cell">
                ${updateCommentsDisplay(task)}
            </td>
        `;

        return row;
    }

    function formatDueDate(dueDate) {
        if (!dueDate) return '<span style="color: #9fadbc;">-</span>';

        const date = new Date(dueDate);
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const taskDate = new Date(date);
        taskDate.setHours(0, 0, 0, 0);

        const diffTime = taskDate - today;
        const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24)); // Use round instead of ceil

        const formattedDate = formatDateForDisplay(dueDate);

        if (diffDays === 0) {
            return '<span style="color: #ff6b6b; font-weight: 500;">Today</span>';
        } else if (diffDays === 1) {
            return '<span style="color: #ffa500; font-weight: 500;">Tomorrow</span>';
        } else if (diffDays === -1) {
            return '<span style="color: #ff6b6b; font-weight: 500;">Yesterday</span>';
        } else if (diffDays < 0) {
            return `<span style="color: #ff6b6b; font-weight: 500;">${formattedDate}</span>`;
        } else if (diffDays <= 7) {
            return `<span style="color: #ffa500;">${formattedDate}</span>`;
        } else {
            return formattedDate;
        }
    }

    function formatDateForDisplay(dateString) {
        if (!dateString) return '';

        const date = new Date(dateString);

        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');

        const formatted = `${year}-${month}-${day}`;

        return formatted;
    }

    function getAssignedBy(task) {
        if (task.CreatedBy === currentUserId) {
            return '<span style="color: #0079bf; font-weight: 500; display: flex; align-items: center; gap: 6px;">' +
                'You</span>';
        }

        const userName = task.AssignedByUserName || 'Project Owner';
        const creatorUser = usersData.find(user => user.Id === task.CreatedBy);

        if (creatorUser) {
            const colorIndex = (usersData.findIndex(user => user.Id === task.CreatedBy) % 6) + 1;
            const initials = getUserInitials(creatorUser.UserName);

            return `<div style="display: flex; align-items: center; gap: 6px;">
                        <div class="table-user-avatar avatar-color-${colorIndex}" style="width: 24px; height: 24px; font-size: 10px;">
                            ${initials}
                        </div>
                        <span>${creatorUser.UserName}</span>
                    </div>`;
        }

        return `<span style="display: flex; align-items: center; gap: 6px;">
                    ${userName}
                </span>`;
    }

    function getAssignedTo(task) {
        const taskUsers = task.taskUsers || [];
        return taskUsers.map(user => user.UserName).join(', ') || '-';
    }

    function createAssignedToCells(task) {
        const taskUsers = task.taskUsers || [];

        if (taskUsers.length === 0) {
            return '<span style="color: #9fadbc; font-style: italic;">-</span>';
        }

        // Filter out users who are no longer project members
        const validTaskUsers = taskUsers.filter(taskUser =>
            usersData.some(projectUser => projectUser.Id === taskUser.Id)
        );

        return validTaskUsers.map((user, index) => {
            const colorIndex = (index % 6) + 1;
            const initials = getUserInitials(user.UserName);
            return `
                    <div class="user-cell" title="${user.UserName}">
                        <div class="table-user-avatar avatar-color-${colorIndex}">${initials}</div>
                        <span>${user.UserName}</span>
                    </div>
                `;
        }).join('');
    }

    function createStatusBadge(status) {
        const statusNum = typeof status === 'string' ? parseInt(status) : status;
        const classMap = {
            1: 'status-todo',
            2: 'status-inprogress',
            3: 'status-done',
            4: 'status-review',
            5: 'status-corrected'
        };

        const statusText = statusNames[statusNum] || 'Unknown';
        return `<span class="status-badge ${classMap[statusNum]}">${statusText}</span>`;
    }

    function createCommentsCell(task) {
        const commentsCount = getCommentsCount(task);
        const latestComment = getLatestCommentPreview(task);

        if (commentsCount === 0) {
            return '<span style="color: #9fadbc; font-style: italic;">No comments</span>';
        }

        return `
            <div>
                <div class="comments-preview" title="${latestComment}">
                    ${latestComment}
                </div>
                <button class="view-comments-btn" onclick="event.stopPropagation(); openTaskModal('${task.Id}')">
                    View all (${commentsCount})
                </button>
            </div>
        `;
    }

    function getCommentsCount(task) {
        return task.CommentsCount || 0;
    }

    function getLatestCommentPreview(task) {
        return task.LatestComment || '';
    }

    // Pagination
    function updatePagination() {
        const totalPages = Math.ceil(filteredTasks.length / pageSize);
        const pageInfo = document.getElementById('pageInfo');
        const prevBtn = document.getElementById('prevPage');
        const nextBtn = document.getElementById('nextPage');

        pageInfo.textContent = `Page ${currentPage} of ${totalPages || 1}`;
        prevBtn.disabled = currentPage === 1;
        nextBtn.disabled = currentPage === totalPages || totalPages === 0;
    }

    function changePage(direction) {
        const totalPages = Math.ceil(filteredTasks.length / pageSize);
        const newPage = currentPage + direction;

        if (newPage >= 1 && newPage <= totalPages) {
            currentPage = newPage;
            renderTable();
            updatePagination();

            document.querySelector('.tasks-table-container').scrollTop = 0;
        }
    }

    // ========== COMMENTS FUNCTIONALITY ==========

    function openCommentsModal(taskId) {
        currentTaskForComments = tasksData.find(t => t.Id === taskId);
        if (!currentTaskForComments) return;

        document.getElementById('commentsTaskTitle').textContent = `Comments: ${currentTaskForComments.Title}`;
        document.getElementById('commentsTaskSubtitle').textContent = `Task: ${currentTaskForComments.Title}`;

        loadComments();

        const modal = document.getElementById('commentsModal');
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function closeCommentsModal() {
        const modal = document.getElementById('commentsModal');
        modal.classList.remove('active');
        document.body.style.overflow = '';
        currentTaskForComments = null;
        document.getElementById('commentInput').value = '';
    }

    async function loadComments() {
        if (!currentTaskForComments) return;

        const commentsList = document.getElementById('commentsList');
        commentsList.innerHTML = '<div class="no-comments">Loading comments...</div>';

        try {
            const comments = await fetchTaskComments(currentTaskForComments.Id);

            if (comments && comments.length > 0) {
                commentsList.innerHTML = comments.map(comment => `
                        <div class="comment-item">
                            <div class="comment-header">
                                <span class="comment-author">${comment.Username}</span>
                                <span class="comment-date">${formatDate(comment.CreatedDateTime)}</span>
                            </div>
                            <div class="comment-text">${comment.Comment}</div>
                        </div>
                    `).join('');
            } else {
                commentsList.innerHTML = '<div class="no-comments">No comments yet. Be the first to comment!</div>';
            }
        } catch (error) {
            console.error('Error loading comments:', error);
            commentsList.innerHTML = '<div class="no-comments">Error loading comments. Please try again.</div>';
        }
    }

    function formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);

        // Use UTC for consistent display
        const year = date.getUTCFullYear();
        const month = String(date.getUTCMonth() + 1).padStart(2, '0');
        const day = String(date.getUTCDate()).padStart(2, '0');

        return `${year}-${month}-${day}`;
    }

    // ========== Task Modal ==========

    let originalDescription = "";
    let originalTitle = "";
    let isAnyDropdownActive = false;
    let selectedUsers = new Set();
    let selectedStatus = null;

    function openTaskModal(taskId) {
        if (!taskId) {
            console.error('Task ID is missing!');
            return;
        }

        const task = tasksData.find(t => t.Id?.toLowerCase() === taskId.toLowerCase());

        if (!task) {
            console.error('Task not found for ID:', taskId);
            return;
        }

        currentTask = task;
        const modal = document.getElementById('taskModal');
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        modal.scrollTop = 0;
        const modalTitle = document.getElementById('modalTitle');
        const modalSubtitle = document.getElementById('modalSubtitle');
        const modalDescription = document.getElementById('modalDescription');

        // Set title
        modalTitle.value = task.Title || 'Untitled Task';
        originalTitle = modalTitle.value;

        // Set subtitle
        const statusName = statusNames[task.ProgressStatus] || 'Unknown';
        modalSubtitle.innerHTML = `in list <strong>${statusName}</strong>`;

        // Set description
        if (task.Description) {
            modalDescription.value = task.Description;
            modalDescription.classList.remove('empty');
        } else {
            modalDescription.value = '';
            modalDescription.classList.add('empty');
        }
        originalDescription = modalDescription.value;

        // Set priority
        const taskPriority = task.PriorityStatus || '1';
        updatePriorityUI(taskPriority);

        // Set due date
        updateDueDateDisplay(task.DueDate);

        // Update users
        updateTaskUsersDisplay();

        // Update attachments
        updateTaskAttachmentsDisplay();
        updateModalAttachmentsDisplay();

        // Update status labels
        updateStatusLabels();

        // Load comments
        loadTaskComments();

        initializeCommentInputValidation();

        updateTaskActions();

        // Show modal
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';

        initializeDropdowns();
    }

    function closeTaskModal() {
        const modal = document.getElementById('taskModal');
        const modalTitle = document.getElementById('modalTitle');
        const descriptionControls = document.getElementById('descriptionControls');

        modalTitle.setAttribute('readonly', 'readonly');
        descriptionControls.classList.remove('active');

        closeAllDropdowns();

        // Close modal
        modal.classList.remove('active');
        document.body.style.overflow = '';
        currentTask = null;
        selectedUsers.clear();
        selectedStatus = null;
    }

    function updateTaskActions() {
        if (!currentTask) return;

        const removeButton = document.querySelector('.sidebar-btn[onclick="toggleSidebarDropdown(\'removeDropdown\', this)"]');
        const isTaskCreator = currentTask.CreatedBy === currentUserId;
        const isAdmin = @(User.IsInRole("Administrator") ? "true" : "false");
        const canRemoveTask = isTaskCreator || isAdmin; // Either owner OR admin can remove

        if (removeButton) {
            if (!canRemoveTask) {
                // User cannot remove this task (not owner and not admin)
                removeButton.disabled = true;
                removeButton.title = "You can only remove tasks that you created";
                removeButton.style.opacity = "0.5";
                removeButton.style.cursor = "not-allowed";
            } else {
                removeButton.disabled = false;
                removeButton.title = "Remove task";
                removeButton.style.opacity = "1";
                removeButton.style.cursor = "pointer";
            }
        }
    }

    function handleModalOverlayClick(event) {
        const modal = document.getElementById('taskModal');

        if (event.target === modal && !isAnyDropdownActive) {
            closeTaskModal();
        }
    }

    // ========== Title Editing ==========

    function enableTitleEdit() {
        const modalTitle = document.getElementById('modalTitle');
        modalTitle.removeAttribute('readonly');
        modalTitle.focus();
        modalTitle.select();
    }

    document.getElementById('modalTitle').addEventListener('blur', function () {
        saveTitle();
    });

    document.getElementById('modalTitle').addEventListener('keydown', function (event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            this.blur();
        }
    });

    async function saveTitle() {
        const modalTitle = document.getElementById('modalTitle');
        const newTitle = modalTitle.value.trim();

        if (!newTitle) {
            alert('Title cannot be empty');
            modalTitle.value = originalTitle;
            modalTitle.setAttribute('readonly', 'readonly');
            return;
        }

        if (newTitle === originalTitle) {
            modalTitle.setAttribute('readonly', 'readonly');
            return;
        }

        if (!currentTask) {
            console.error('No current task selected');
            return;
        }

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('title', newTitle);

            const response = await fetch('/Project/UpdateTaskTitle', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                modalTitle.setAttribute('readonly', 'readonly');
                originalTitle = newTitle;

                const taskIndex = tasksData.findIndex(t => t.Id === currentTask.Id);
                if (taskIndex !== -1) {
                    tasksData[taskIndex].Title = newTitle;
                }

                updateTableRow(currentTask.Id, 'title', newTitle);
            } else {
                alert('Failed to update title: ' + (data.message || 'Unknown error'));
                modalTitle.value = originalTitle;
                modalTitle.setAttribute('readonly', 'readonly');
            }
        } catch (error) {
            console.error('Error updating title:', error);
            alert('Error updating title. Please try again.');
            modalTitle.value = originalTitle;
            modalTitle.setAttribute('readonly', 'readonly');
        }
    }

    // ========== Description Editing ==========

    function enableDescriptionEdit() {
        const modalDescription = document.getElementById('modalDescription');
        const descriptionControls = document.getElementById('descriptionControls');

        modalDescription.removeAttribute('readonly');
        modalDescription.focus();
        modalDescription.classList.remove('empty');
        descriptionControls.classList.add('active');
    }

    async function saveDescription() {
        const modalDescription = document.getElementById('modalDescription');
        const descriptionControls = document.getElementById('descriptionControls');
        const newDescription = modalDescription.value.trim();

        if (!currentTask) {
            console.error('No current task selected');
            return;
        }

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('description', newDescription);

            const response = await fetch('/Project/UpdateTaskDescription', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                modalDescription.setAttribute('readonly', 'readonly');
                descriptionControls.classList.remove('active');
                originalDescription = newDescription;

                if (!modalDescription.value.trim()) {
                    modalDescription.classList.add('empty');
                }

                const taskIndex = tasksData.findIndex(t => t.Id === currentTask.Id);
                if (taskIndex !== -1) {
                    tasksData[taskIndex].Description = newDescription;
                }

                updateTableRow(currentTask.Id, 'description', newDescription);
            } else {
                alert('Failed to update description: ' + (data.message || 'Unknown error'));
                cancelDescriptionEdit();
            }
        } catch (error) {
            console.error('Error updating description:', error);
            alert('Error updating description. Please try again.');
            cancelDescriptionEdit();
        }
    }

    function cancelDescriptionEdit() {
        const modalDescription = document.getElementById('modalDescription');
        const descriptionControls = document.getElementById('descriptionControls');

        modalDescription.value = originalDescription;
        modalDescription.setAttribute('readonly', 'readonly');
        descriptionControls.classList.remove('active');

        if (!modalDescription.value.trim()) {
            modalDescription.classList.add('empty');
        }
    }

    // ========== Due Date ==========

    function updateDueDateDisplay(dueDate) {
        const dueDateInput = document.getElementById('dueDateDisplayInput');

        if (!dueDate) {
            if (dueDateInput) {
                dueDateInput.value = '';
                dueDateInput.placeholder = 'No due date';
            }
            return;
        }

        // Use the UTC formatting function
        const formattedDate = formatDateForDisplay(dueDate);

        if (dueDateInput) {
            dueDateInput.value = formattedDate;
            dueDateInput.placeholder = '';
            updateClearButtonVisibility(dueDateInput);
        }
    }

    function openDatePicker(type) {
        if (type === 'dueDate') {
            document.getElementById('dueDatePicker').style.display = 'block';
            document.getElementById('dueDatePicker').focus();
        }
    }

    async function saveDueDate() {
        if (!currentTask) return;

        const dueDatePicker = document.getElementById('dueDatePicker');
        const sidebarDueDatePicker = document.getElementById('sidebarDueDatePicker');
        const dueDate = dueDatePicker.value || sidebarDueDatePicker.value;

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('dueDate', dueDate);

            const response = await fetch('/Project/UpdateTaskDueDate', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                dueDatePicker.style.display = 'none';
                sidebarDueDatePicker.value = '';
                updateDueDateDisplay(dueDate);

                const taskIndex = tasksData.findIndex(t => t.Id === currentTask.Id);
                if (taskIndex !== -1) {
                    tasksData[taskIndex].DueDate = dueDate;
                }

                updateTableRow(currentTask.Id, 'dueDate', dueDate);
                closeAllDropdowns();
            } else {
                alert('Failed to update due date: ' + (data.message || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error updating due date:', error);
            alert('Error updating due date. Please try again.');
        }
    }

    function clearDueDate() {
        if (!currentTask) return;

        document.getElementById('dueDatePicker').value = '';
        document.getElementById('sidebarDueDatePicker').value = '';
        saveDueDate();
    }

    // ========== Member ==========

    async function addUserToTask(userId, userName) {
        if (!currentTask) {
            console.error('No current task selected');
            return;
        }

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('userId', userId);

            const response = await fetch('/Project/AddTaskMember', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                if (!currentTask.taskUsers) {
                    currentTask.taskUsers = [];
                }

                if (!currentTask.taskUsers.some(user => user.Id === userId)) {
                    currentTask.taskUsers.push({
                        Id: userId,
                        UserName: userName,
                        Email: ''
                    });
                }

                updateTaskUsersDisplay();
                updateMembersDropdownSelection();

                updateTableRow(currentTask.Id, 'assignedTo', currentTask.taskUsers);

                return true;
            } else {
                alert('Failed to add member: ' + (data.message || 'Unknown error'));
                return false;
            }
        } catch (error) {
            console.error('Error adding member:', error);
            alert('Error adding member. Please try again.');
            return false;
        }
    }

    async function removeUserFromTask(userId, userName) {
        if (!currentTask) {
            console.error('No current task selected');
            return;
        }

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('userId', userId);

            const response = await fetch('/Project/RemoveTaskMember', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                if (currentTask.taskUsers) {
                    currentTask.taskUsers = currentTask.taskUsers.filter(user => user.Id !== userId);
                }

                updateTaskUsersDisplay();
                updateMembersDropdownSelection();

                updateTableRow(currentTask.Id, 'assignedTo', currentTask.taskUsers);

                return true;
            } else {
                alert('Failed to remove member: ' + (data.message || 'Unknown error'));
                return false;
            }
        } catch (error) {
            console.error('Error removing member:', error);
            alert('Error removing member. Please Try again.');
            return false;
        }
    }

    function populateMembersList() {
        const membersList = document.getElementById('membersList');
        if (!membersList) return;

        membersList.innerHTML = '';

        if (usersData.length === 0) {
            membersList.innerHTML = '<div class="no-results">No members found</div>';
            return;
        }

        usersData.forEach((user, index) => {
            const colorIndex = (index % 6) + 1;
            const userItem = document.createElement('div');
            userItem.className = 'user-item';
            userItem.setAttribute('data-user-id', user.Id);

            const isSelected = currentTask && currentTask.taskUsers &&
                currentTask.taskUsers.some(taskUser => taskUser.Id === user.Id);

            if (isSelected) {
                userItem.classList.add('selected');
            }

            userItem.innerHTML = `
                    <div class="user-avatar avatar-color-${colorIndex}">
                        ${user.UserName ? user.UserName.substring(0, 2).toUpperCase() : '?'}
                    </div>
                    <span>${user.UserName || 'Unknown User'}</span>
                `;

            userItem.onclick = () => toggleUserAssignment(userItem, user.Id, user.UserName);
            membersList.appendChild(userItem);
        });
    }

    function toggleUserAssignment(userItem, userId, userName) {
        if (!currentTask) {
            console.error('No current task selected');
            return;
        }

        if (!usersData.some(user => user.Id === userId)) {
            alert('This user is no longer a project member');
            return;
        }

        const isCurrentlySelected = userItem.classList.contains('selected');

        if (isCurrentlySelected) {
            removeUserFromTask(userId, userName).then(success => {
                if (success) {
                    userItem.classList.remove('selected');
                }
            });
        } else {
            addUserToTask(userId, userName).then(success => {
                if (success) {
                    userItem.classList.add('selected');
                }
            });
        }
    }
    function filterMembers() {
        const searchTerm = document.getElementById('membersSearch').value.toLowerCase();
        const userItems = document.querySelectorAll('#membersList .user-item');

        userItems.forEach(item => {
            const userName = item.querySelector('span').textContent.toLowerCase();
            if (userName.includes(searchTerm)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    function updateTaskUsersDisplay() {
        if (!currentTask) return;

        const taskUsersSection = document.getElementById('taskUsersSection');
        const taskUsersAvatars = document.getElementById('taskUsersAvatars');
        const noUsersMessage = document.getElementById('noUsersMessage');

        taskUsersAvatars.innerHTML = '';

        const taskUsers = currentTask.taskUsers || [];

        const validTaskUsers = taskUsers.filter(taskUser =>
            usersData.some(projectUser => projectUser.Id === taskUser.Id)
        );

        currentTask.taskUsers = validTaskUsers;

        if (validTaskUsers.length > 0) {
            taskUsersSection.style.display = 'block';
            noUsersMessage.style.display = 'none';

            validTaskUsers.forEach((user, index) => {
                const colorIndex = (index % 6) + 1;
                const avatar = document.createElement('div');
                avatar.className = `task-user-avatar avatar-color-${colorIndex}`;
                avatar.title = `${user.UserName} - Click to remove`;
                avatar.innerHTML = user.UserName ? user.UserName.substring(0, 2).toUpperCase() : '?';
                avatar.onclick = (e) => {
                    e.stopPropagation();
                    removeUserFromTask(user.Id, user.UserName);
                };
                taskUsersAvatars.appendChild(avatar);
            });
        } else {
            taskUsersSection.style.display = 'none';
            noUsersMessage.style.display = 'block';
        }
    }

    function updateMembersDropdownSelection() {
        if (!currentTask) return;

        const taskUsers = currentTask.taskUsers || [];
        const userItems = document.querySelectorAll('#membersList .user-item');

        userItems.forEach(item => {
            const userId = item.getAttribute('data-user-id');
            const isSelected = taskUsers.some(user => user.Id === userId);

            if (isSelected) {
                item.classList.add('selected');
            } else {
                item.classList.remove('selected');
            }
        });
    }

    // ========== Attachment ==========

    function setupFileUpload() {
        const uploadArea = document.getElementById('fileUploadArea');

        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');

            const files = Array.from(e.dataTransfer.files);
            if (files.length > 0) {
                handleFileUpload(files);
            }
        });
    }

    function handleFileInputChange(files) {
        const fileArray = Array.from(files);
        if (fileArray.length > 0) {
            handleFileUpload(fileArray);
            document.getElementById('fileInput').value = '';
        }
    }

    async function handleFileUpload(files) {
        if (!files.length) return;
        if (!currentTask) {
            alert('Please select a task first');
            return;
        }

        const uploadResults = await uploadFilesToServer(files);

        let successCount = 0;
        for (const result of uploadResults) {
            if (result.success) {
                await createTaskAttachmentRecord(result);
                successCount++;
            }
        }
    }

    async function uploadFilesToServer(files) {
        const formData = new FormData();

        for (let i = 0; i < files.length; i++) {
            formData.append('files', files[i]);
        }

        try {
            const response = await fetch('/Project/UploadAttachments', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                return data.results;
            } else {
                alert('Upload failed: ' + data.message);
                return [];
            }
        } catch (error) {
            console.error('Error uploading files:', error);
            alert('Error uploading files. Please try again.');
            return [];
        }
    }

    async function createTaskAttachmentRecord(uploadResult) {
        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('fileName', uploadResult.originalName);
            formData.append('filePath', uploadResult.path);

            const response = await fetch('/Project/CreateTaskAttachment', {
                method: 'POST',
                body: formData
            });

            const responseText = await response.text();

            let data;
            try {
                data = JSON.parse(responseText);
            } catch (parseError) {
                console.error('Failed to parse response as JSON:', parseError);
                return null;
            }

            if (data.success && data.taskAttachment) {
                const newAttachment = {
                    Id: data.taskAttachment.id,
                    TaskId: data.taskAttachment.taskId,
                    FileName: data.taskAttachment.fileName,
                    FilePath: data.taskAttachment.filePath
                };

                if (!currentTask.taskAttachments) {
                    currentTask.taskAttachments = [];
                }
                currentTask.taskAttachments.push(newAttachment);

                updateTaskAttachmentsDisplay();
                updateModalAttachmentsDisplay();
                return newAttachment;
            } else {
                console.error('Failed to create attachment record. Success:', data.success, 'Message:', data.message);
                return null;
            }
        } catch (error) {
            console.error('Error creating attachment record:', error);
            return null;
        }
    }

    async function downloadAttachmentFromModel(attachmentId) {
        const attachment = currentTask.taskAttachments?.find(a => a.Id == attachmentId);
        if (attachment && attachment.FilePath) {
            try {
                const response = await fetch(attachment.FilePath);
                const blob = await response.blob();
                const downloadUrl = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = downloadUrl;
                a.download = attachment.FileName;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(downloadUrl);
            } catch (error) {
                console.error('Error downloading attachment:', error);
                window.open(attachment.FilePath, '_blank');
            }
        }
    }

    async function removeAttachmentFromModel(attachmentId) {
        try {
            const formData = new FormData();
            formData.append('attachmentId', attachmentId);

            const response = await fetch('/Project/RemoveAttachment', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                if (currentTask.taskAttachments) {
                    currentTask.taskAttachments = currentTask.taskAttachments.filter(a => a.Id != attachmentId);
                }

                updateTaskAttachmentsDisplay();
                updateModalAttachmentsDisplay();
            } else {
                alert('Failed to delete attachment: ' + (result.message || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error deleting attachment:', error);
            alert('Error deleting attachment. Please try again.');
        }
    }

    function updateTaskAttachmentsDisplay() {
        const attachmentsList = document.getElementById('attachmentsList');
        attachmentsList.innerHTML = '';

        if (!currentTask.taskAttachments || currentTask.taskAttachments.length === 0) {
            attachmentsList.innerHTML = '<div class="no-results">No attachments</div>';
            return;
        }

        currentTask.taskAttachments.forEach(attachment => {
            addAttachmentToList(attachment);
        });
    }

    function addAttachmentToList(attachment) {
        const attachmentsList = document.getElementById('attachmentsList');

        const noResults = attachmentsList.querySelector('.no-results');
        if (noResults) {
            noResults.remove();
        }

        const fileIcon = getFileIcon(attachment.FileName);
        const attachmentElement = document.createElement('div');
        attachmentElement.className = 'attachment-preview';
        attachmentElement.innerHTML = `
            <i class="bi ${fileIcon} attachment-icon"></i>
            <div class="attachment-info">
                <span class="attachment-name">${attachment.FileName}</span>
                <span class="file-size">${formatDate(attachment.CreatedDateTime)}</span>
            </div>
            <div class="attachment-actions">
                <button class="action-btn" onclick="downloadAttachmentFromModel('${attachment.Id}')" title="Download">
                    <i class="bi bi-download"></i>
                </button>
                <button class="action-btn" onclick="removeAttachmentFromModel('${attachment.Id}')" title="Delete">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        `;
        attachmentsList.appendChild(attachmentElement);
    }

    function updateModalAttachmentsDisplay() {
        const attachmentsSection = document.getElementById('attachmentsSection');
        const modalAttachmentsList = document.getElementById('modalAttachmentsList');

        if (!currentTask.taskAttachments || currentTask.taskAttachments.length === 0) {
            attachmentsSection.style.display = 'none';
            modalAttachmentsList.innerHTML = '';
            return;
        }

        attachmentsSection.style.display = 'block';
        modalAttachmentsList.innerHTML = '';

        currentTask.taskAttachments.forEach(attachment => {
            addAttachmentToModalList(attachment);
        });
    }

    function addAttachmentToModalList(attachment) {
        const modalAttachmentsList = document.getElementById('modalAttachmentsList');

        const fileIcon = getFileIcon(attachment.FileName);
        const uploadDate = formatDate(attachment.CreatedDateTime);

        const attachmentElement = document.createElement('div');
        attachmentElement.className = 'attachment-item';
        attachmentElement.innerHTML = `
                <div class="attachment-icon-large">
                    <i class="bi ${fileIcon}"></i>
                </div>
                <div class="attachment-details">
                    <span class="attachment-name">${attachment.FileName}</span>
                    <div class="attachment-meta">
                        <span>Added ${uploadDate}</span>
                    </div>
                </div>
                <div class="attachment-actions-modal">
                    <button class="action-btn-modal" onclick="downloadAttachmentFromModel('${attachment.Id}')" title="Download">
                        <i class="bi bi-download"></i>
                        Download
                    </button>
                    <button class="action-btn-modal" onclick="removeAttachmentFromModel('${attachment.Id}')" title="Delete">
                        <i class="bi bi-trash"></i>
                        Delete
                    </button>
                </div>
            `;

        modalAttachmentsList.appendChild(attachmentElement);
    }

    function getFileIcon(fileName) {
        if (!fileName) return 'bi-file-earmark';
        const extension = fileName.split('.').pop().toLowerCase();
        const iconMap = {
            'jpg': 'bi-file-image',
            'jpeg': 'bi-file-image',
            'png': 'bi-file-image',
            'gif': 'bi-file-image',
            'pdf': 'bi-file-pdf',
            'doc': 'bi-file-word',
            'docx': 'bi-file-word',
            'xls': 'bi-file-excel',
            'xlsx': 'bi-file-excel',
            'txt': 'bi-file-text',
            'zip': 'bi-file-zip',
            'rar': 'bi-file-zip'
        };
        return iconMap[extension] || 'bi-file-earmark';
    }

    // ========== TASK MOVING ==========

    function selectStatus(status, element) {
        document.querySelectorAll('#statusList .status-option').forEach(option => {
            option.classList.remove('selected');
        });

        element.classList.add('selected');
        selectedStatus = status;

        moveTask(status);
    }

    async function moveTask(newStatus) {
        if (!currentTask) return;

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('progressStatus', newStatus.toString());

            const response = await fetch('/Project/MoveTask', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                closeAllDropdowns();

                const modalSubtitle = document.getElementById('modalSubtitle');
                modalSubtitle.innerHTML = `in list <strong>${statusNames[newStatus]}</strong>`;

                const taskIndex = tasksData.findIndex(t => t.Id === currentTask.Id);
                if (taskIndex !== -1) {
                    tasksData[taskIndex].ProgressStatus = newStatus;
                }

                currentTask.ProgressStatus = newStatus;

                updateStatusLabels();
                updateTableRow(currentTask.Id, 'status', newStatus);
            } else {
                alert('Failed to move task: ' + (data.message || 'Unknown error'));
                closeAllDropdowns();
            }
        } catch (error) {
            console.error('Error moving task:', error);
            alert('Error moving task. Please try again.');
            closeAllDropdowns();
        }
    }

    // ========== Remove Task ==========

    async function removeTask() {
        if (!currentTask) return;

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);

            const response = await fetch('/Project/RemoveTask', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                const taskIndex = tasksData.findIndex(t => t.Id === currentTask.Id);
                if (taskIndex !== -1) {
                    tasksData.splice(taskIndex, 1);
                }

                removeTableRow(currentTask.Id);
                closeTaskModal();
            } else {
                // Show specific error message from backend
                alert('Failed to remove task: ' + (data.message || 'Unknown error'));
                closeAllDropdowns();
            }
        } catch (error) {
            console.error('Error removing task:', error);
            alert('Error removing task. Please try again.');
            closeAllDropdowns();
        }
    }

    // ========== Task Comments ==========

    async function loadTaskComments() {
        if (!currentTask) return;

        const commentsList = document.getElementById('taskCommentsList');
        commentsList.innerHTML = '<div class="no-comments">Loading comments...</div>';

        try {
            // Get comments from the current task data that's already loaded
            const comments = getTaskCommentsFromModel(currentTask.Id);

            if (comments && comments.length > 0) {
                const uniqueComments = [];
                const seenCommentIds = new Set();

                comments.forEach(comment => {
                    const commentId = comment.id || comment.Id;
                    if (!seenCommentIds.has(commentId)) {
                        seenCommentIds.add(commentId);
                        uniqueComments.push(comment);
                    }
                });

                // Sort comments by createdDateTime in descending order (newest first)
                const sortedComments = [...uniqueComments].sort((a, b) => {
                    const dateA = new Date(a.createdDateTime || a.CreatedDateTime);
                    const dateB = new Date(b.createdDateTime || b.CreatedDateTime);
                    return dateB - dateA; // Descending order (newest first)
                });

                commentsList.innerHTML = sortedComments.map(comment => {
                    const commentId = comment.id || comment.Id;
                    const isOwnComment = (comment.userId || comment.UserId) === currentUserId;

                    return `
                        <div class="comment-item" data-comment-id="${commentId}">
                            <div class="comment-header">
                                <span class="comment-author">${comment.username || comment.Username || 'Unknown User'}</span>
                                <span class="comment-date">${formatCommentDate(comment.createdDateTime || comment.CreatedDateTime)}</span>
                            </div>
                            <div class="comment-text">${comment.comment || comment.Comment || ''}</div>
                            ${isOwnComment ? `
                                <div class="comment-actions" style="margin-top: 8px;">
                                    <button class="action-btn-modal" onclick="event.stopPropagation(); openDeleteCommentModal(${commentId})" title="Delete comment">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            ` : ''}
                        </div>
                    `;
                }).join('');

                // Auto-scroll to top to show the newest comments
                commentsList.scrollTop = 0;
            } else {
                commentsList.innerHTML = '<div class="no-comments">No comments yet. Be the first to comment!</div>';
            }
        } catch (error) {
            console.error('Error loading comments:', error);
            commentsList.innerHTML = '<div class="no-comments">Error loading comments. Please try again.</div>';
        }
    }

    function getTaskCommentsFromModel(taskId) {
        const task = tasksData.find(t => t.Id === taskId);
        let comments = task?.taskComments || [];

        const uniqueComments = [];
        const seenCommentIds = new Set();

        comments.forEach(comment => {
            const commentId = comment.id || comment.Id;
            if (!seenCommentIds.has(commentId)) {
                seenCommentIds.add(commentId);
                uniqueComments.push(comment);
            }
        });

        return uniqueComments.sort((a, b) => {
            const dateA = new Date(a.createdDateTime || a.CreatedDateTime);
            const dateB = new Date(b.createdDateTime || b.CreatedDateTime);
            return dateB - dateA; // Descending order (newest first)
        });
    }

    async function addTaskComment() {
        if (!currentTask) return;

        const commentInput = document.getElementById('taskCommentInput');
        const addCommentBtn = document.querySelector('#commentsSidebar .btn-save');
        const commentText = commentInput.value.trim();

        if (!commentText) {
            alert('Please enter a comment');
            commentInput.focus();
            return;
        }

        try {
            const originalText = addCommentBtn.textContent;
            addCommentBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Adding...';
            addCommentBtn.disabled = true;
            commentInput.disabled = true;

            const newComment = await addTaskCommentToServer(currentTask.Id, commentText);

            if (newComment) {
                commentInput.value = '';

                addCommentToUI(newComment);

                updateLocalTaskWithComment(currentTask.Id, newComment);

                updateTableRow(currentTask.Id, 'comments', { refresh: true });

                const commentsList = document.getElementById('taskCommentsList');
                commentsList.scrollTop = 0;

                updateAddCommentButtonState(commentInput, addCommentBtn);
            }
        } catch (error) {
            console.error('Error adding comment:', error);
            alert('Error adding comment. Please try again.');
        } finally {
            const addCommentBtn = document.querySelector('#commentsSidebar .btn-save');
            addCommentBtn.textContent = 'Add Comment';
            addCommentBtn.disabled = false; // Will be updated by updateAddCommentButtonState
            commentInput.disabled = false;

            updateAddCommentButtonState(commentInput, addCommentBtn);
        }
    }

    function addCommentToUI(newComment) {
        const commentsList = document.getElementById('taskCommentsList');

        const noComments = commentsList.querySelector('.no-comments');
        if (noComments) {
            noComments.remove();
        }

        const commentId = newComment.id || newComment.Id;
        const existingComment = commentsList.querySelector(`[data-comment-id="${commentId}"]`);

        // Create new comment element
        const commentElement = document.createElement('div');
        commentElement.className = 'comment-item';
        commentElement.setAttribute('data-comment-id', commentId); // Add data attribute for duplicate checking

        commentElement.innerHTML = `
            <div class="comment-header">
                <span class="comment-author">${newComment.username || 'Unknown User'}</span>
                <span class="comment-date">${formatCommentDate(newComment.createdDateTime)}</span>
            </div>
            <div class="comment-text">${newComment.comment || ''}</div>
            ${newComment.userId === currentUserId ? `
                <div class="comment-actions" style="margin-top: 8px;">
                    <button class="action-btn-modal" onclick="event.stopPropagation(); openDeleteCommentModal(${commentId})" title="Delete comment">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            ` : ''}
        `;

        commentsList.insertBefore(commentElement, commentsList.firstChild);
    }

    function updateLocalTaskWithComment(taskId, newComment) {
        // Find the task in tasksData
        const taskIndex = tasksData.findIndex(t => t.Id === taskId);
        if (taskIndex !== -1) {
            // Initialize taskComments array if it doesn't exist
            if (!tasksData[taskIndex].taskComments) {
                tasksData[taskIndex].taskComments = [];
            }

            const commentId = newComment.id || newComment.Id;
            const commentExists = tasksData[taskIndex].taskComments.some(
                comment => (comment.id || comment.Id) === commentId
            );

            if (!commentExists) {
                tasksData[taskIndex].taskComments.push(newComment);
            } else {
                console.log('Comment already exists in tasksData, skipping duplicate');
            }

            // Also update currentTask if it's the same task
            if (currentTask && currentTask.Id === taskId) {
                if (!currentTask.taskComments) {
                    currentTask.taskComments = [];
                }

                const currentTaskCommentExists = currentTask.taskComments.some(
                    comment => (comment.id || comment.Id) === commentId
                );

                if (!currentTaskCommentExists) {
                    currentTask.taskComments.push(newComment);
                } else {
                    console.log('Comment already exists in currentTask, skipping duplicate');
                }
            }
        }
    }

    async function addTaskCommentToServer(taskId, commentText) {
        try {
            const formData = new FormData();
            formData.append('taskId', taskId);
            formData.append('userId', currentUserId);
            formData.append('comment', commentText);

            const response = await fetch('/Project/CreateTaskComment', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }

            const result = await response.json();

            if (result.success && result.comment) {
                return result.comment;
            } else {
                throw new Error(result.message || 'Failed to add comment');
            }
        } catch (error) {
            console.error('Error adding comment to server:', error);
            throw error;
        }
    }

    async function refreshTaskComments(taskId) {
        const task = tasksData.find(t => t.Id === taskId);
        if (task) {
            await loadTaskComments();
        }
    }

    function formatCommentDate(dateString) {
        if (!dateString) return '';

        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / (1000 * 60));
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

        if (diffMins < 1) {
            return 'Just now';
        } else if (diffMins < 60) {
            return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;
        } else if (diffHours < 24) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else if (diffDays < 7) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else {
            // Format as YYYY-MM-DD for older dates
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
    }

    function updateCommentsDisplay(task) {
        const comments = task.taskComments || [];
        const commentsCount = task.CommentsCount || comments.length;

        if (commentsCount === 0) {
            return '<span style="color: #9fadbc; font-style: italic;">No comments</span>';
        }

        // Get the latest comment for preview (newest first)
        const sortedComments = [...comments].sort((a, b) => {
            const dateA = new Date(a.createdDateTime || a.CreatedDateTime);
            const dateB = new Date(b.createdDateTime || b.CreatedDateTime);
            return dateB - dateA;
        });

        const latestComment = sortedComments[0];
        const commentText = latestComment.comment || latestComment.Comment || 'Click to view comments';

        return `
            <div>
                <div class="comments-preview" title="${commentText}">
                    ${commentText}
                </div>
                <button class="view-comments-btn" onclick="event.stopPropagation(); openTaskModal('${task.Id}')">
                    View all (${commentsCount})
                </button>
            </div>
        `;
    }

    // Update table functions to handle comments
    function getCommentsCount(task) {
        return task.taskComments ? task.taskComments.length : 0;
    }

    function getLatestCommentPreview(task) {
        const comments = task.taskComments || [];
        if (comments.length === 0) return 'No comments';

        // Sort to get the latest comment
        const sortedComments = [...comments].sort((a, b) => {
            const dateA = new Date(a.createdDateTime || a.CreatedDateTime);
            const dateB = new Date(b.createdDateTime || b.CreatedDateTime);
            return dateB - dateA;
        });

        const latestComment = sortedComments[0];
        return latestComment.comment || latestComment.Comment || 'Click to view comments';
    }

    // Add event listener for Enter key in comment input
    document.getElementById('taskCommentInput')?.addEventListener('keydown', function (event) {
        if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            addTaskComment();
        }
    });

    // ========== Dropdown ==========

    function toggleSidebarDropdown(dropdownId, button) {
        const dropdown = document.getElementById(dropdownId);
        const allDropdowns = document.querySelectorAll('.sidebar-dropdown');

        allDropdowns.forEach(d => {
            if (d.id !== dropdownId) d.classList.remove('active');
        });

        if (dropdown.classList.contains('active')) {
            dropdown.classList.remove('active');
            isAnyDropdownActive = false;
        } else {
            dropdown.classList.add('active');
            isAnyDropdownActive = true;
            positionDropdown(dropdown, button);
        }
    }

    function positionDropdown(dropdown, button) {
        const buttonRect = button.getBoundingClientRect();
        const dropdownRect = dropdown.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;

        let left = buttonRect.right + 8;
        let top = buttonRect.top;

        if (left + dropdownRect.width > viewportWidth - 16) {
            left = buttonRect.left - dropdownRect.width - 8;
        }

        if (top + dropdownRect.height > viewportHeight - 16) {
            top = viewportHeight - dropdownRect.height - 16;
        }

        if (top < 16) {
            top = 16;
        }

        dropdown.style.position = 'fixed';
        dropdown.style.left = left + 'px';
        dropdown.style.top = top + 'px';
        dropdown.style.zIndex = '10002';
    }

    function closeAllDropdowns() {
        document.querySelectorAll('.sidebar-dropdown').forEach(d => {
            d.classList.remove('active');
        });
        isAnyDropdownActive = false;
    }

    function initializeDropdowns() {
        populateMembersList();
        setupFileUpload();
    }

    function updateStatusLabels() {
        if (!currentTask) return;

        const statusOptions = document.querySelectorAll('#statusList .status-option');
        statusOptions.forEach(option => {
            const statusValue = parseInt(option.getAttribute('data-status'));

            const existingLabel = option.querySelector('span');
            if (existingLabel) {
                existingLabel.remove();
            }

            const baseText = option.textContent.trim();

            option.innerHTML = baseText;

            if (statusValue === currentTask.ProgressStatus) {
                const currentLabel = document.createElement('span');
                currentLabel.style.cssText = 'color: #0079bf; font-weight: 600; margin-left: 8px;';
                currentLabel.textContent = '(Current)';
                option.appendChild(currentLabel);
            }
        });
    }

    // ========== Table ==========

    function updateTableRow(taskId, field, value) {
        const taskIndex = filteredTasks.findIndex(t => t.Id === taskId);
        if (taskIndex !== -1) {
            // Update the local data
            if (field === 'assignedTo') {
                filteredTasks[taskIndex].taskUsers = value;
            }

            // Re-render the entire table to reflect changes
            renderTable();
        }
    }

    function removeTableRow(taskId) {
        // Remove task from filtered data and refresh table
        const taskIndex = filteredTasks.findIndex(t => t.Id === taskId);
        if (taskIndex !== -1) {
            filteredTasks.splice(taskIndex, 1);
        }
        renderTable();
        updatePagination();
    }

    // Event listeners
    document.addEventListener('click', function (e) {
        const clickedElement = e.target;

        const modal = document.getElementById('taskModal');
        if (!modal.classList.contains('active')) return;

        if (clickedElement.closest('.sidebar-btn')) {
            return;
        }

        if (!clickedElement.closest('.sidebar-dropdown')) {
            closeAllDropdowns();
        }
    });

    // ========== Edit Task Priority ==========
    function setTaskPriority(priority, element) {
        if (!currentTask) return;

        document.querySelectorAll('#taskModal .priority-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        element.classList.add('active');

        const priorityString = String(priority);
        saveTaskPriority(priorityString);
    }

    async function saveTaskPriority(priority) {
        if (!currentTask) return;

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('priorityStatus', priority);


            const response = await fetch('/Project/UpdateTaskPriority', {
                method: 'POST',
                body: formData
            });

            const responseText = await response.text();

            let data;
            try {
                data = JSON.parse(responseText);
            } catch (parseError) {
                alert('Server returned invalid response');
                return;
            }


            if (data.success) {
                const taskIndex = tasksData.findIndex(t => t.Id === currentTask.Id);
                if (taskIndex !== -1) {
                    tasksData[taskIndex].PriorityStatus = priority;
                }
                currentTask.PriorityStatus = priority;

                updateTableRow(currentTask.Id, 'priority', priority);
            } else {
                console.error('❌ Backend returned error:', data.message);
                alert('Failed to update priority: ' + (data.message || 'Unknown error'));
                updatePriorityUI(currentTask.PriorityStatus);
            }
        } catch (error) {
            console.error('❌ Network error:', error);
            alert('Error updating priority. Please try again.');
            updatePriorityUI(currentTask.PriorityStatus);
        }
    }

    function updatePriorityUI(priority) {
        // Remove active class from all priority buttons
        document.querySelectorAll('#taskModal .priority-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // Add active class to current priority button
        const activeBtn = document.querySelector(`#taskModal .priority-btn[data-priority="${priority}"]`);
        if (activeBtn) {
            activeBtn.classList.add('active');
        }
    }

    // ========== Add Task Priority ==========
    function createPriorityBadge(priority) {
        // Use PriorityStatus data
        const priorityMap = {
            '1': { text: 'Low', class: 'priority-low' },
            '2': { text: 'Medium', class: 'priority-medium' },
            '3': { text: 'High', class: 'priority-high' }
        };

        const prioInfo = priorityMap[priority] || priorityMap['1'];

        return `<span class="priority-badge ${prioInfo.class}">${prioInfo.text}</span>`;
    }

    function setAddTaskPriority(priority, element) {
        document.querySelectorAll('#addTaskModal .priority-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        element.classList.add('active');

        // Store the numeric value directly
        currentAddTaskPriority = priority;
    }

    function openAddTaskDatePicker() {
        openModalDatePicker('addTaskDueDate');
    }

    function clearTaskDueDate() {
        if (!currentTask) return;

        // Clear the display
        const dueDateInput = document.getElementById('dueDateDisplayInput');
        if (dueDateInput) {
            dueDateInput.value = '';
            updateClearButtonVisibility(dueDateInput);
        }

        // Save to server
        saveDueDateToServer('');
    }

    function closeAllAddTaskDropdowns() {
        document.querySelectorAll('#addTaskMembersDropdown, #addTaskDueDateDropdown, #addTaskStatusDropdown').forEach(dropdown => {
            dropdown.style.display = 'none';
        });
    }

    // ========== Add Task Due Date ==========

    function openAddTaskDatePicker() {
        const dueDateInput = document.getElementById('addTaskDueDate');
        openDatePicker(dueDateInput);
    }

    function clearAddTaskDueDate() {
        const dueDateInput = document.getElementById('addTaskDueDate');
        if (dueDateInput) {
            dueDateInput.value = '';
            updateClearButtonVisibility(dueDateInput);
        }
    }

    // ========== Edit Task Due Date ==========

    function openTaskDueDatePicker() {
        const dueDateInput = document.getElementById('dueDateDisplayInput');
        openDatePicker(dueDateInput);
    }

    function clearTaskDueDate() {
        if (!currentTask) return;

        const dueDateInput = document.getElementById('dueDateDisplayInput');
        if (dueDateInput) {
            dueDateInput.value = '';
            updateClearButtonVisibility(dueDateInput);
            saveDueDateToServer('');
        }
    }

    // ========== Date Selection Handler ==========

    // Override the selectDate function to handle modal date updates
    function selectDate(day) {
        if (!currentDatePicker || !currentDateInput) return;

        // Create the selected date using UTC to avoid timezone issues
        const selectedDate = new Date(Date.UTC(
            currentViewDate.getFullYear(),
            currentViewDate.getMonth(),
            day
        ));

        // Validate the date range
        if (!validateSelectedDate(selectedDate)) {
            return;
        }

        // Format date as YYYY-MM-DD using UTC
        const year = selectedDate.getUTCFullYear();
        const month = String(selectedDate.getUTCMonth() + 1).padStart(2, '0');
        const dayFormatted = String(selectedDate.getUTCDate()).padStart(2, '0');
        const formattedDate = `${year}-${month}-${dayFormatted}`;

        // Update the input value
        currentDateInput.value = formattedDate;
        updateClearButtonVisibility(currentDateInput);

        // Handle different contexts
        if (currentDateInput.id === 'addTaskDueDate') {
            // For add task modal - update the newTaskData
            if (typeof newTaskData !== 'undefined') {
                newTaskData.dueDate = formattedDate;
                if (typeof updateAddTaskUI !== 'undefined') {
                    updateAddTaskUI();
                }
            }
        } else if (currentDateInput.id === 'dueDateDisplayInput') {
            // For edit task modal - save to server
            if (typeof saveDueDateToServer !== 'undefined' && currentTask) {
                saveDueDateToServer(formattedDate);
            }
        } else {
            // For filter dates
            applyFilters();
        }

        closeDatePicker();
    }

    // ========== Save Due Date to Server ==========

    async function saveDueDateToServer(dueDate) {
        if (!currentTask) return;

        try {
            const formData = new FormData();
            formData.append('taskId', currentTask.Id);
            formData.append('dueDate', dueDate);

            const response = await fetch('/Project/UpdateTaskDueDate', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                // Update local data
                const taskIndex = tasksData.findIndex(t => t.Id === currentTask.Id);
                if (taskIndex !== -1) {
                    tasksData[taskIndex].DueDate = dueDate;
                }

                // Update table display
                updateTableRow(currentTask.Id, 'dueDate', dueDate);
            } else {
                alert('Failed to update due date: ' + (data.message || 'Unknown error'));
                // Revert the input value on error
                updateDueDateDisplay(currentTask.DueDate);
            }
        } catch (error) {
            console.error('Error updating due date:', error);
            alert('Error updating due date. Please try again.');
            // Revert the input value on error
            updateDueDateDisplay(currentTask.DueDate);
        }
    }

    // ========== Project Name Editing ==========

    function enableProjectNameEdit() {
        const projectNameDisplay = document.getElementById("projectNameDisplay");
        const projectNameInput = document.getElementById("projectNameInput");
        const currentWidth = projectNameDisplay.offsetWidth + 20;
        projectNameInput.style.width = `${currentWidth}px`;
        projectNameInput.value = projectNameDisplay.textContent.trim();

        projectNameDisplay.style.display = "none";
        projectNameInput.style.display = "inline-block";
        projectNameInput.focus();
        projectNameInput.select();
    }

    function saveProjectName() {
        const projectNameDisplay = document.getElementById("projectNameDisplay");
        const projectNameInput = document.getElementById("projectNameInput");
        const projectId = "@Model.project.Id";

        const newName = projectNameInput.value.trim();
        if (newName.length === 0) {
            alert("Project name cannot be empty.");
            projectNameInput.focus();
            return;
        }

        projectNameDisplay.textContent = newName;
        projectNameDisplay.style.display = "inline-block";
        projectNameInput.style.display = "none";

        fetch(`/Project/UpdateProjectName?id=${projectId}&projectName=${encodeURIComponent(newName)}`, {
            method: "PATCH"
        })
            .then(res => res.json())
            .then(data => {
                if (!data.success) {
                    alert("Failed to update project name: " + data.message);
                }
            })
            .catch(err => console.error("Error updating project name:", err));
    }

    function handleEnter(event) {
        if (event.key === "Enter") {
            event.preventDefault();
            saveProjectName();
        } else if (event.key === "Escape") {
            const projectNameInput = document.getElementById("projectNameInput");
            const projectNameDisplay = document.getElementById("projectNameDisplay");
            projectNameInput.style.display = "none";
            projectNameDisplay.style.display = "inline-block";
        }
    }

    // ========== MEMBER MANAGEMENT ==========
    function toggleDropdown(id) {
        const dropdown = document.getElementById(id);
        const allDropdowns = document.querySelectorAll('.dropdown-content');

        allDropdowns.forEach(menu => {
            if (menu.id !== id) menu.style.display = 'none';
        });

        if (dropdown.style.display === 'block') {
            dropdown.style.display = 'none';
            return;
        }

        const button = event.target.closest('.more-btn');
        const rect = button.getBoundingClientRect();

        document.body.appendChild(dropdown);

        dropdown.style.display = 'block';
        dropdown.style.position = 'absolute';
        dropdown.style.left = `${rect.left + window.scrollX - 100}px`;
        dropdown.style.top = `${rect.bottom + window.scrollY + 4}px`;
    }

    window.addEventListener('click', function (event) {
        if (!event.target.closest('.dropdown')) {
            document.querySelectorAll('.dropdown-content').forEach(menu => menu.style.display = 'none');
        }
    });

    function openAddMemberModal() {
        if (!@(Model?.users != null && Model.users.Count > 0 ? "true" : "false")) {
            alert('Only administrators can manage project members.');
            return;
        }

        const modal = document.getElementById('addMemberModal');
        populateAddMemberUsersList();
        document.getElementById('addMemberSearch').value = '';
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function closeAddMemberModal() {
        const modal = document.getElementById('addMemberModal');
        modal.classList.remove('active');
        document.body.style.overflow = '';
    }

    function populateAddMemberUsersList() {
        const usersList = document.getElementById('addMemberUsersList');
        usersList.innerHTML = '';

        const currentProjectMemberIds = new Set(usersData.map(user => user.Id));

        const availableUsers = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.users ?? new List<UserReturnModel>()));

        if (availableUsers.length === 0) {
            usersList.innerHTML = '<div class="add-member-no-users">No users available</div>';
            return;
        }

        availableUsers.forEach((user, index) => {
            const colorIndex = (index % 6) + 1;
            const isCurrentMember = currentProjectMemberIds.has(user.Id);

            const userItem = document.createElement('div');
            userItem.className = `add-member-user-item ${isCurrentMember ? 'selected' : ''}`;

            userItem.innerHTML = `
                    <div class="add-member-user-avatar avatar-color-${colorIndex}">
                        ${getUserInitials(user.UserName)}
                    </div>
                    <div class="add-member-user-info">
                        <div class="add-member-user-name">${user.UserName || 'Unknown User'}</div>
                        <div class="add-member-user-email">${user.Email || 'No email'}</div>
                    </div>
                    <div class="add-member-checkbox"></div>
                `;

            userItem.onclick = () => toggleUserMembership(user.Id, user.UserName, userItem, isCurrentMember);
            usersList.appendChild(userItem);
        });
    }

    async function toggleUserMembership(userId, userName, userItem, isCurrentlyMember) {
        const projectId = "@Model?.project?.Id";

        try {
            userItem.style.opacity = '0.6';
            userItem.style.cursor = 'wait';

            if (isCurrentlyMember) {
                await removeUserFromProject(projectId, userId);
                // Immediately remove from UI
                removeUserFromNavbar(userId);
                removeUserFromModalMemberList(userId);
            } else {
                await addUserToProject(projectId, userId);
                // Immediately add to UI
                addUserToNavbar(userId, userName);
                addUserToModalMemberList(userId, userName);
            }

            userItem.classList.toggle('selected');
            userItem.style.opacity = '1';
            userItem.style.cursor = 'pointer';

            refreshMemberFilter();

        } catch (error) {
            console.error('Error toggling user membership:', error);
            alert(`Failed to ${isCurrentlyMember ? 'remove' : 'add'} member. Please try again.`);
            userItem.style.opacity = '1';
            userItem.style.cursor = 'pointer';
        }
    }

    async function addUserToProject(projectId, userId) {
        const formData = new FormData();
        formData.append('projectId', projectId);
        formData.append('userId', userId);

        const response = await fetch('/Project/AddProjectMember', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const responseText = await response.text();
        let data;
        try {
            data = JSON.parse(responseText);
        } catch (parseError) {
            throw new Error('Server returned invalid response');
        }

        if (!data.success) {
            throw new Error(data.message || 'Failed to add user to project');
        }

        return data;
    }

    async function removeUserFromProject(projectId, userId) {
        const formData = new FormData();
        formData.append('projectId', projectId);
        formData.append('userId', userId);

        const response = await fetch('/Project/RemoveProjectMember', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const responseText = await response.text();
        let data;
        try {
            data = JSON.parse(responseText);
        } catch (parseError) {
            throw new Error('Server returned invalid response');
        }

        if (!data.success) {
            throw new Error(data.message || 'Failed to remove user from project');
        }

        return data;
    }

    function filterAddMemberUsers() {
        const searchTerm = document.getElementById('addMemberSearch').value.toLowerCase();
        const userItems = document.querySelectorAll('#addMemberUsersList .add-member-user-item');

        userItems.forEach(item => {
            const userName = item.querySelector('.add-member-user-name').textContent.toLowerCase();
            const userEmail = item.querySelector('.add-member-user-email').textContent.toLowerCase();

            if (userName.includes(searchTerm) || userEmail.includes(searchTerm)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    function addUserToNavbar(userId, userName) {
        const navbarRight = document.querySelector('.navbar-right');
        const dropdown = navbarRight.querySelector('.dropdown');

        const existingAvatar = navbarRight.querySelector(`.user-avatar[data-user-id="${userId}"]`);
        if (existingAvatar) return;

        const userAvatars = navbarRight.querySelectorAll('.user-avatar:not([data-user-id])');
        const colorIndex = (userAvatars.length % 6) + 1;

        const initials = getUserInitials(userName);

        const newAvatar = document.createElement('div');
        newAvatar.className = `user-avatar avatar-color-${colorIndex}`;
        newAvatar.title = userName;
        newAvatar.setAttribute('data-user-id', userId);
        newAvatar.innerHTML = initials;

        navbarRight.insertBefore(newAvatar, dropdown);

        if (!usersData.some(user => user.Id === userId)) {
            usersData.push({
                Id: userId,
                UserName: userName,
                Email: ''
            });
        }
    }

    function removeUserFromNavbar(userId) {
        const navbarRight = document.querySelector('.navbar-right');
        const avatarToRemove = navbarRight.querySelector(`.user-avatar[data-user-id="${userId}"]`);
        if (avatarToRemove) {
            avatarToRemove.remove();
        }

        const userIndex = usersData.findIndex(user => user.Id === userId);
        if (userIndex !== -1) {
            usersData.splice(userIndex, 1);
        }
    }

    function addUserToModalMemberList(userId, userName) {
        if (!usersData.some(user => user.Id === userId)) {
            usersData.push({
                Id: userId,
                UserName: userName,
                Email: ''
            });
        }

        refreshAllMemberLists();
    }

    function syncTaskMembersWithProject() {
        const projectMemberIds = new Set(usersData.map(user => user.Id));

        tasksData.forEach(task => {
            if (task.taskUsers) {
                const validTaskUsers = task.taskUsers.filter(user =>
                    projectMemberIds.has(user.Id)
                );

                // Update the task if any users were removed
                if (validTaskUsers.length !== task.taskUsers.length) {
                    task.taskUsers = validTaskUsers;

                    // If this task is currently open in the modal, update the UI
                    if (currentTask && currentTask.Id === task.Id) {
                        updateTaskUsersDisplay();
                    }
                }
            }
        });

        renderTable();
    }

    function removeUserFromModalMemberList(userId) {
        const userIndex = usersData.findIndex(user => user.Id === userId);
        if (userIndex !== -1) {
            usersData.splice(userIndex, 1);
        }

        removeUserFromAllTasks(userId);

        syncTaskMembersWithProject();

        refreshAllMemberLists();
    }

    function refreshAllMemberLists() {
        if (document.getElementById('addTaskMembersList')) {
            populateAddTaskMembersList();
        }

        if (document.getElementById('membersList')) {
            populateMembersList();
        }

        refreshMemberFilter();
    }

    function refreshMemberFilter() {
        const memberFilter = document.getElementById('memberFilter');
        const currentValue = memberFilter.value;

        memberFilter.innerHTML = '<option value="">All Members</option>';

        usersData.forEach(user => {
            const option = document.createElement('option');
            option.value = user.Id;
            option.textContent = user.UserName;
            memberFilter.appendChild(option);
        });

        // Restore previous selection if it still exists
        if (currentValue && usersData.some(user => user.Id === currentValue)) {
            memberFilter.value = currentValue;
        }
    }

    function removeUserFromAllTasks(userId) {
        let needsTableRefresh = false;

        tasksData.forEach(task => {
            if (task.taskUsers) {
                const initialUserCount = task.taskUsers.length;
                task.taskUsers = task.taskUsers.filter(user => user.Id !== userId);

                if (task.taskUsers.length !== initialUserCount) {
                    needsTableRefresh = true;
                }

                if (currentTask && currentTask.Id === task.Id) {
                    updateTaskUsersDisplay();
                }
            }
        });

        if (needsTableRefresh) {
            renderTable();
            updatePagination();
        }
    }

    function getUserInitials(userName) {
        if (!userName) return '?';

        const nameParts = userName.trim().split(' ');
        if (nameParts.length >= 2) {
            return (nameParts[0][0] + nameParts[1][0]).toUpperCase();
        } else if (userName.length >= 2) {
            return userName.substring(0, 2).toUpperCase();
        } else {
            return userName.toUpperCase();
        }
    }

    // ========== Delete Project ==========
    function openDeleteProjectModal() {
        const modal = document.getElementById('deleteProjectModal');
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function closeDeleteProjectModal() {
        const modal = document.getElementById('deleteProjectModal');
        modal.classList.remove('active');
        document.body.style.overflow = '';
    }

    async function deleteProject() {
        const projectId = "@Model?.project?.Id";
        const confirmBtn = document.getElementById('deleteProjectConfirmBtn');

        try {
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Deleting...';

            const response = await fetch('/Project/DeleteProject', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(projectId)
            });

            const data = await response.json();

            if (data.success) {
                window.location.href = '/Project/Index';
            } else {
                alert('Failed to delete project: ' + (data.message || 'Unknown error'));
                confirmBtn.disabled = false;
                confirmBtn.textContent = 'Delete Project';
            }
        } catch (error) {
            console.error('Error deleting project:', error);
            alert('Error deleting project. Please try again.');
            confirmBtn.disabled = false;
            confirmBtn.textContent = 'Delete Project';
        }
    }

    // ========== Comment Deletion Functions ==========

    let commentToDelete = null;

    function initializeCommentInputValidation() {
        const commentInput = document.getElementById('taskCommentInput');
        const addCommentBtn = document.querySelector('#commentsSidebar .btn-save');

        if (commentInput && addCommentBtn) {
            updateAddCommentButtonState(commentInput, addCommentBtn);

            commentInput.addEventListener('input', () => {
                updateAddCommentButtonState(commentInput, addCommentBtn);
            });

            commentInput.addEventListener('keyup', (event) => {
                updateAddCommentButtonState(commentInput, addCommentBtn);
            });
        }
    }

    function updateAddCommentButtonState(commentInput, addCommentBtn) {
        const commentText = commentInput.value.trim();

        if (!commentText) {
            // Disable button
            addCommentBtn.disabled = true;
            addCommentBtn.style.opacity = '0.6';
            addCommentBtn.style.cursor = 'not-allowed';
            addCommentBtn.title = 'Please enter a comment';
        } else {
            // Enable button
            addCommentBtn.disabled = false;
            addCommentBtn.style.opacity = '1';
            addCommentBtn.style.cursor = 'pointer';
            addCommentBtn.title = 'Add comment';
        }
    }

    function openDeleteCommentModal(commentId) {
        commentToDelete = commentId;
        const modal = document.getElementById('deleteCommentModal');
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function closeDeleteCommentModal() {
        const modal = document.getElementById('deleteCommentModal');
        modal.classList.remove('active');
        document.body.style.overflow = '';
        commentToDelete = null;
    }

    async function confirmDeleteComment() {
        if (!commentToDelete) {
            closeDeleteCommentModal();
            return;
        }

        const confirmBtn = document.getElementById('deleteCommentConfirmBtn');

        try {
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Deleting...';

            await deleteTaskComment(commentToDelete);

            closeDeleteCommentModal();
        } catch (error) {
            console.error('Error deleting comment:', error);
            alert('Error deleting comment. Please try again.');
        } finally {
            confirmBtn.disabled = false;
            confirmBtn.textContent = 'Delete Comment';
            commentToDelete = null;
        }
    }

    async function deleteTaskComment(commentId) {
        if (!commentId || !currentTask) return;

        try {
            const response = await fetch(`/Project/RemoveTaskComment?commentId=${commentId}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
                removeCommentFromLocalData(commentId);

                await loadTaskComments();

                updateTableRow(currentTask.Id, 'comments', { refresh: true });
            } else {
                throw new Error(result.message || 'Failed to delete comment');
            }
        } catch (error) {
            console.error('Error deleting comment:', error);
            throw error;
        }
    }

    function removeCommentFromLocalData(commentId) {
        // Remove from currentTask
        if (currentTask && currentTask.taskComments) {
            currentTask.taskComments = currentTask.taskComments.filter(comment =>
                (comment.id || comment.Id) != commentId
            );

            currentTask.CommentsCount = Math.max(0, (currentTask.CommentsCount || 0) - 1);
        }

        // Remove from tasksData
        const taskIndex = tasksData.findIndex(t => t.Id === currentTask.Id);
        if (taskIndex !== -1 && tasksData[taskIndex].taskComments) {
            tasksData[taskIndex].taskComments = tasksData[taskIndex].taskComments.filter(comment =>
                (comment.id || comment.Id) != commentId
            );

            tasksData[taskIndex].CommentsCount = Math.max(0, (tasksData[taskIndex].CommentsCount || 0) - 1);
        }
    }

    window.addEventListener('resize', function () {
        const modal = document.getElementById('taskModal');
        if (modal.classList.contains('active')) {
            modal.style.display = 'none';
            modal.offsetHeight; // Trigger reflow
            modal.style.display = 'block';
        }
    });
</script>

<script src="~/js/createtask.js"></script>
<script src="~/js/datepicker.js"></script>